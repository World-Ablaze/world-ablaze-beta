add_INF = {
	add_building_construction = { type = infrastructure level = 1 instant_build = no }
}

agrarian_society_removal = {
	if = {
		limit = {
			has_idea = agrarian_society_1
		}
		remove_ideas = agrarian_society_1
	}
	if = {
		limit = {
			has_idea = agrarian_society_2
		}
		remove_ideas = agrarian_society_2
	}
	if = {
		limit = {
			has_idea = agrarian_society_3
		}
		remove_ideas = agrarian_society_3
	}
	if = {
		limit = {
			has_idea = agrarian_society_4
		}
		remove_ideas = agrarian_society_4
	}
	if = {
		limit = {
			has_idea = agrarian_society_5
		}
		remove_ideas = agrarian_society_5
	}
}

agrarian_society_down = {
	if = {
		limit = {
			has_idea = agrarian_society_5
		}
		remove_ideas = agrarian_society_5
	}
	else_if = {
		limit = {
			has_idea = agrarian_society_4
		}
		swap_ideas = {
			remove_idea = agrarian_society_4
			add_idea = agrarian_society_5
		}
	}
	else_if = {
		limit = {
			has_idea = agrarian_society_3
		}
		swap_ideas = {
			remove_idea = agrarian_society_3
			add_idea = agrarian_society_4
		}
	}
	else_if = {
		limit = {
			has_idea = agrarian_society_2
		}
		swap_ideas = {
			remove_idea = agrarian_society_2
			add_idea = agrarian_society_3
		}
	}
	else_if = {
		limit = {
			has_idea = agrarian_society_1
		}
		swap_ideas = {
			remove_idea = agrarian_society_1
			add_idea = agrarian_society_2
		}
	}
}

MAN_banditry_down = {
	if = {
		limit = {
			has_idea = MAN_banditry_4
		}
		remove_ideas = MAN_banditry_4
	}
	else_if = {
		limit = {
			has_idea = MAN_banditry_3
		}
		swap_ideas = {
			remove_idea = MAN_banditry_3
			add_idea = MAN_banditry_4
		}
	}
	else_if = {
		limit = {
			has_idea = MAN_banditry_2
		}
		swap_ideas = {
			remove_idea = MAN_banditry_2
			add_idea = MAN_banditry_3
		}
	}
	else_if = {
		limit = {
			has_idea = MAN_banditry_1
		}
		swap_ideas = {
			remove_idea = MAN_banditry_1
			add_idea = MAN_banditry_2
		}
	}
}

SOV_execute_infiltration_effects_for_PREV = {
	if = {
		limit = {
			has_state_flag = {
				flag = SOV_infiltration_@PREV
				value = 1
			}
		}
		damage_building = {
			type = infrastructure
			damage = 4
		}
		damage_building = {
			type = arms_factory
			damage = 4
		}
		custom_effect_tooltip = SOV_infiltrate_uprising_effect_1
	}
	if = {
		limit = {
			has_state_flag = {
				flag = SOV_infiltration_@PREV
				value = 2
			}
		}
		PREV = {
			set_state_controller = PREV
		}
		custom_effect_tooltip = SOV_infiltrate_uprising_effect_2
	}
	if = {
		limit = {
			has_state_flag = {
				flag = SOV_infiltration_@PREV
				value = 3
			}
		}
		PREV = {
			set_state_controller = PREV
			division_template = {
				name = "Partisan Militia"
				priority = 2
				division_names_group = SOV_GAR_01

				regiments = {
					infantry = { x = 0 y = 0 }
					infantry = { x = 0 y = 1 }
					infantry = { x = 0 y = 2 }

					infantry = { x = 1 y = 0 }
					infantry = { x = 1 y = 1 }
					infantry = { x = 1 y = 2 }

					infantry = { x = 2 y = 0 }
					infantry = { x = 2 y = 1 }
					infantry = { x = 2 y = 2 }

					infantry = { x = 3 y = 0 }
					infantry = { x = 3 y = 1 }
					infantry = { x = 3 y = 2 }
				}
				support = {
					engineer = { x = 0 y = 0 }
					horse_logistics_company = { x = 0 y = 1 }

					recon = { x = 1 y = 0 }
				}
			}
		}
		custom_effect_tooltip = SOV_infiltrate_uprising_effect_3
		hidden_effect = {
			create_unit = {
				division = "name = \"Partisan Militia\" division_template = \"Partisan Militia\" start_experience_factor = 0.3 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "name = \"Partisan Militia\" division_template = \"Partisan Militia\" start_experience_factor = 0.3 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "name = \"Partisan Militia\" division_template = \"Partisan Militia\" start_experience_factor = 0.3 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "name = \"Partisan Militia\" division_template = \"Partisan Militia\" start_experience_factor = 0.3 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "name = \"Partisan Militia\" division_template = \"Partisan Militia\" start_experience_factor = 0.3 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "name = \"Partisan Militia\" division_template = \"Partisan Militia\" start_experience_factor = 0.3 start_equipment_factor = 1"
				owner = PREV
			}
		}
	}
	if = {
		limit = {
			has_state_flag = {
				flag = SOV_infiltration_@PREV
				value = 4
			}
		}
		#We probably don't want to destroy stuff in the state when we gain control and have units there.
		PREV = {
			set_state_controller = PREV
			division_template = {
				name = "Partisan Division"
				priority = 2
				division_names_group = SOV_INF_01

				regiments = {
					heavy_infantry = { x = 0 y = 0 }
					heavy_infantry = { x = 0 y = 1 }
					heavy_infantry = { x = 0 y = 2 }

					heavy_infantry = { x = 1 y = 0 }
					heavy_infantry = { x = 1 y = 1 }
					heavy_infantry = { x = 1 y = 2 }
					heavy_infantry = { x = 1 y = 3 }

					heavy_infantry = { x = 2 y = 0 }
					heavy_infantry = { x = 2 y = 1 }
					heavy_infantry = { x = 2 y = 2 }

					artillery_brigade = { x = 3 y = 0 }
					artillery_brigade = { x = 3 y = 1 }
					artillery_brigade = { x = 3 y = 2 }
					anti_tank_brigade = { x = 3 y = 3 }
					anti_tank_brigade = { x = 3 y = 4 }
				}
				support = {
					engineer = { x = 0 y = 0 }
					heavy_artillery = { x = 0 y = 1 }
					motorized_logistics_company = { x = 0 y = 2 }
					signal_company = { x = 0 y = 3 }

					recon = { x = 1 y = 0 }
					field_hospital = { x = 1 y = 1 }
					anti_air = { x = 1 y = 2 }
				}
			}
		}
		custom_effect_tooltip = SOV_infiltrate_uprising_effect_4
		hidden_effect = {
			create_unit = {
				division = "name = \"Partisan Division\" division_template = \"Partisan Division\" start_experience_factor = 0.5 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "name = \"Partisan Division\" division_template = \"Partisan Division\" start_experience_factor = 0.5 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "name = \"Partisan Division\" division_template = \"Partisan Division\" start_experience_factor = 0.5 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "name = \"Partisan Division\" division_template = \"Partisan Division\" start_experience_factor = 0.5 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "name = \"Partisan Division\" division_template = \"Partisan Division\" start_experience_factor = 0.5 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "name = \"Partisan Division\" division_template = \"Partisan Division\" start_experience_factor = 0.5 start_equipment_factor = 1"
				owner = PREV
			}
		}
	}
}

copy_laws_effect = {
	#conscription
	if = {
		limit = {
			ROOT = {
				has_idea = disarmed_nation
			}
		}
		prev = {
			add_ideas = disarmed_nation
		}
	}
	else_if = {
		limit = {
			ROOT = {
				has_idea = volunteer_only
			}
		}
		prev = {
			add_ideas = volunteer_only
		}
	}
	else_if = {
		limit = {
			ROOT = {
				has_idea = limited_conscription
			}
		}
		prev = {
			add_ideas = limited_conscription
		}
	}
	else_if = {
		limit = {
			ROOT = {
				has_idea = extensive_conscription
			}
		}
		prev = {
			add_ideas = extensive_conscription
		}
	}
	else_if = {
		limit = {
			ROOT = {
				has_idea = service_by_requirement
			}
		}
		prev = {
			add_ideas = service_by_requirement
		}
	}
	else_if = {
		limit = {
			ROOT = {
				has_idea = all_adults_serve
			}
		}
		prev = {
			add_ideas = all_adults_serve
		}
	}
	else_if = {
		limit = {
			ROOT = {
				has_idea = scraping_the_barrel
			}
		}
		prev = {
			add_ideas = scraping_the_barrel
		}
	}
	#trade
	if = {
		limit = {
			ROOT = {
				has_idea = closed_economy
			}
		}
		prev = {
			add_ideas = closed_economy
		}
	}
	else_if = {
		limit = {
			ROOT = {
				has_idea = limited_exports
			}
		}
		prev = {
			add_ideas = limited_exports
		}
	}
	else_if = {
		limit = {
			ROOT = {
				has_idea = export_focus
			}
		}
		prev = {
			add_ideas = export_focus
		}
	}
	else_if = {
		limit = {
			ROOT = {
				has_idea = free_trade
			}
		}
		prev = {
			add_ideas = free_trade
		}
	}
	#economy
	if = {
		limit = {
			ROOT = {
				has_idea = civilian_economy
			}
		}
		prev = {
			add_ideas = civilian_economy
		}
	}
	else_if = {
		limit = {
			ROOT = {
				has_idea = low_economic_mobilisation
			}
		}
		prev = {
			add_ideas = low_economic_mobilisation
		}
	}
	else_if = {
		limit = {
			ROOT = {
				has_idea = partial_economic_mobilisation
			}
		}
		prev = {
			add_ideas = partial_economic_mobilisation
		}
	}
	else_if = {
		limit = {
			ROOT = {
				has_idea = war_economy
			}
		}
		prev = {
			add_ideas = war_economy
		}
	}
	else_if = {
		limit = {
			ROOT = {
				has_idea = tot_economic_mobilisation
			}
		}
		prev = {
			add_ideas = tot_economic_mobilisation
		}
	}
}

recalculate_steel_mills = {
	set_variable = {this.previous_steel_mills_core = this.current_steel_mill_core}
	set_variable = {this.current_steel_mills = 0 }
	set_variable = {this.total_steel_mill = 0 }
	set_variable = {this.total_steel_mill_core = 0 }
	set_variable = {this.current_steel_mill_core = 0 }
	every_controlled_state = {
		if = {
			limit = {
				is_core_of = prev
			}
			add_to_variable = {
				prev.current_steel_mill_core = building_level@steel_refinery
			}
			add_to_variable = {
				prev.current_steel_mill_core = building_level@hydro_steel_refinery
			}
			add_to_variable = {
				prev.total_steel_mill_core = building_level@steel_refinery_inactive
			}
			add_to_variable = {
				prev.total_steel_mill_core = building_level@hydro_steel_refinery_inactive
			}
		}
		else = {
			add_to_variable = {
				prev.current_steel_mills = building_level@steel_refinery
			}
			add_to_variable = {
				prev.current_steel_mills = building_level@hydro_steel_refinery
			}
			add_to_variable = {
				prev.total_steel_mill = building_level@steel_refinery_inactive
			}
			add_to_variable = {
				prev.total_steel_mill = building_level@hydro_steel_refinery_inactive
			}
		}
	}
	add_to_variable = {
		this.total_steel_mill_core = this.current_steel_mill_core
	}
	add_to_variable = {
		this.total_steel_mill = this.current_steel_mills
	}
	add_to_variable = {
		this.total_steel_mill = this.total_steel_mill_core
	}
	add_to_variable = {
		this.current_steel_mills = this.current_steel_mill_core
	}
}

recalculate_alu_mills = {
	set_variable = {this.previous_alu_mills_core = this.current_alu_mill_core}
	set_variable = {this.current_alu_mills = 0 }
	set_variable = {this.total_alu_mill = 0 }
	set_variable = {this.total_alu_mill_core = 0 }
	set_variable = {this.current_alu_mill_core = 0 }
	every_controlled_state = {
		if = {
			limit = {
				is_core_of = prev
			}
			add_to_variable = {
				prev.current_alu_mill_core = building_level@aluminium_refinery
			}
			add_to_variable = {
				prev.current_alu_mill_core = building_level@hydro_aluminium_refinery
			}
			add_to_variable = {
				prev.total_alu_mill_core = building_level@aluminium_refinery_inactive
			}
			add_to_variable = {
				prev.total_alu_mill_core = building_level@hydro_aluminium_refinery_inactive
			}
		}
		else = {
			add_to_variable = {
				prev.current_alu_mills = building_level@aluminium_refinery
			}
			add_to_variable = {
				prev.current_alu_mills = building_level@hydro_aluminium_refinery
			}
			add_to_variable = {
				prev.total_alu_mill = building_level@aluminium_refinery_inactive
			}
			add_to_variable = {
				prev.total_alu_mill = building_level@hydro_aluminium_refinery_inactive
			}
		}
	}
	add_to_variable = {
		this.total_alu_mill_core = this.current_alu_mill_core
	}
	add_to_variable = {
		this.total_alu_mill = this.current_alu_mills
	}
	add_to_variable = {
		this.total_alu_mill = this.total_alu_mill_core
	}
	add_to_variable = {
		this.current_alu_mills = this.current_alu_mill_core
	}
}

recalculate_synth = {
	set_variable = {this.previous_synth_core = this.current_synth_core}
	set_variable = {this.current_synth = 0 }
	set_variable = {this.total_synth = 0 }
	set_variable = {this.total_synth_core = 0 }
	set_variable = {this.current_synth_core = 0 }
	every_controlled_state = {
		if = {
			limit = {
				is_core_of = prev
			}
			add_to_variable = {
				prev.current_synth_core = building_level@synthetic_refinery
			}
			add_to_variable = {
				prev.total_synth_core = building_level@synthetic_refinery_inactive
			}
		}
		else = {
			add_to_variable = {
				prev.current_synth = building_level@synthetic_refinery
			}
			add_to_variable = {
				prev.total_synth = building_level@synthetic_refinery_inactive
			}
		}
	}
	add_to_variable = {
		this.total_synth_core = this.current_synth_core
	}
	add_to_variable = {
		this.total_synth = this.current_synth
	}
	add_to_variable = {
		this.total_synth = this.total_synth_core
	}
	add_to_variable = {
		this.current_synth = this.current_synth_core
	}
}

enable_steel_mill = {
	remove_building = {
		type = steel_refinery_inactive
		level = 1
	}
	add_building_construction = {
		type = steel_refinery
		level = 1
		instant_build = yes
	}
}

disable_steel_mill = {
	remove_building = {
		type = steel_refinery
		level = 1
	}
	add_building_construction = {
		type = steel_refinery_inactive
		level = 1
		instant_build = yes
	}
}

enable_hydro_steel_mill = {
	remove_building = {
		type = hydro_steel_refinery_inactive
		level = 1
	}
	add_building_construction = {
		type = hydro_steel_refinery
		level = 1
		instant_build = yes
	}
}

disable_hydro_steel_mill = {
	remove_building = {
		type = hydro_steel_refinery
		level = 1
	}
	add_building_construction = {
		type = hydro_steel_refinery_inactive
		level = 1
		instant_build = yes
	}
}

enable_aluminium_mill = {
	remove_building = {
		type = aluminium_refinery_inactive
		level = 1
	}
	add_building_construction = {
		type = aluminium_refinery
		level = 1
		instant_build = yes
	}
}

disable_aluminium_mill = {
	remove_building = {
		type = aluminium_refinery
		level = 1
	}
	add_building_construction = {
		type = aluminium_refinery_inactive
		level = 1
		instant_build = yes
	}
}

enable_hydro_aluminium_mill = {
	remove_building = {
		type = hydro_aluminium_refinery_inactive
		level = 1
	}
	add_building_construction = {
		type = hydro_aluminium_refinery
		level = 1
		instant_build = yes
	}
}

disable_hydro_aluminium_mill = {
	remove_building = {
		type = hydro_aluminium_refinery
		level = 1
	}
	add_building_construction = {
		type = hydro_aluminium_refinery_inactive
		level = 1
		instant_build = yes
	}
}

enable_synth = {
	remove_building = {
		type = synthetic_refinery_inactive
		level = 1
	}
	add_building_construction = {
		type = synthetic_refinery
		level = 1
		instant_build = yes
	}
}

disable_synth = {
	remove_building = {
		type = synthetic_refinery
		level = 1
	}
	add_building_construction = {
		type = synthetic_refinery_inactive
		level = 1
		instant_build = yes
	}
}

manage_steel_mills = {
	# Automatically turn on new mills built since last update
	if = {
		limit = {
			check_variable = { current_steel_mill_core > previous_steel_mills_core }
			check_variable = { open_steel_mill_target = previous_open_steel_mill_target }
		}
		set_temp_variable = { tempMillDifference = current_steel_mill_core }
		subtract_from_temp_variable = { tempMillDifference = previous_steel_mills_core }
		add_to_variable = { open_steel_mill_target = tempMillDifference }
	}
	# close refineries from lack of resources
	if = {
		limit = {
			or = {
				check_variable = { resource@iron < 0 }
				check_variable = { resource@coal < 0 }
			}
			any_controlled_state = {
				or = {
					hydro_steel_refinery > 0
					steel_refinery > 0
				}
			}
		}
		set_temp_variable = { tempIron = resource@iron }
		set_temp_variable = { tempCoal = resource@coal }
		while_loop_effect = {
			limit = {
				OR = {
					check_variable = { tempIron < 0 }
					check_variable = { tempCoal < 0 }
				}
			}
			add_to_temp_variable = {
				var = tempIron
				value = 25
			}
			add_to_temp_variable = {
				var = tempCoal
				value = 20
			}
			if = {
				limit = {
					any_controlled_state = {
						not = {
							is_core_of = root
						}
						steel_refinery > 0
					}
				}
				random_controlled_state = {
					limit = {
						steel_refinery > 0
						not = {
							is_core_of = root
						}
					}
					disable_steel_mill = yes
				}
				subtract_from_variable = {
					current_steel_mills = 1
				}
			}
			else_if = {
				limit = {
					any_controlled_state = {
						not = {
							is_core_of = root
						}
						hydro_steel_refinery > 0
					}
				}
				random_controlled_state = {
					limit = {
						hydro_steel_refinery > 0
						not = {
							is_core_of = root
						}
					}
					disable_hydro_steel_mill = yes
				}
				subtract_from_temp_variable = {
					var = tempCoal
					value = 15
				}
				subtract_from_variable = {
					current_steel_mills = 1
				}
			}
			else_if = {
				limit = {
					any_controlled_state = {
						steel_refinery > 0
					}
				}
				random_controlled_state = {
					limit = {
						steel_refinery > 0
					}
					disable_steel_mill = yes
				}
				subtract_from_variable = {
					current_steel_mills = 1
				}
				subtract_from_variable = {
					current_steel_mill_core = 1
				}
			}
			else_if = {
				limit = {
					any_controlled_state = {
						hydro_steel_refinery > 0
					}
				}
				random_controlled_state = {
					limit = {
						hydro_steel_refinery > 0
					}
					disable_hydro_steel_mill = yes
				}
				subtract_from_temp_variable = {
					var = tempCoal
					value = 15
				}
				subtract_from_variable = {
					current_steel_mills = 1
				}
				subtract_from_variable = {
					current_steel_mill_core = 1
				}
			}
		}
	}
	# open refineries to match player target
	else_if = {
		limit = {
			check_variable = {open_steel_mill_target > current_steel_mills}
			check_variable = { resource@iron > 24 }
			check_variable = { resource@coal > 19 }
			any_controlled_state = {
				or = {
					hydro_steel_refinery_inactive > 0
					steel_refinery_inactive > 0
				}
			}
		}
		set_temp_variable = { tempIron = resource@iron }
		set_temp_variable = { tempCoal = resource@coal }
		while_loop_effect = {
			limit = {
				check_variable = {open_steel_mill_target > current_steel_mills}
				check_variable = {tempIron > 24}
				check_variable = {tempCoal > 19}
			}
			subtract_from_temp_variable = {
				var = tempIron
				value = 25
			}
			subtract_from_temp_variable = {
				var = tempCoal
				value = 5
			}
			if = {
				limit = {
					any_controlled_state = {
						hydro_steel_refinery_inactive > 0
						is_core_of = root
					}
				}
				random_controlled_state = {
					limit = {
						hydro_steel_refinery_inactive > 0
						is_core_of = root
					}
					enable_hydro_steel_mill = yes
				}
				add_to_variable = {
					current_steel_mills = 1
				}
				add_to_variable = {
					current_steel_mill_core = 1
				}
			}
			else_if = {
				limit = {
					any_controlled_state = {
						steel_refinery_inactive > 0
						is_core_of = root
					}
				}
				random_controlled_state = {
					limit = {
						steel_refinery_inactive > 0
						is_core_of = root
					}
					enable_steel_mill = yes
				}
				subtract_from_temp_variable = {
					var = tempCoal
					value = 15
				}
				add_to_variable = {
					current_steel_mills = 1
				}
				add_to_variable = {
					current_steel_mill_core = 1
				}
			}
			else_if = {
				limit = {
					any_controlled_state = {
						hydro_steel_refinery_inactive > 0
					}
				}
				random_controlled_state = {
					limit = {
						hydro_steel_refinery_inactive > 0
					}
					enable_hydro_steel_mill = yes
				}
				add_to_variable = {
					current_steel_mills = 1
				}
			}
			else_if = {
				limit = {
					any_controlled_state = {
						steel_refinery_inactive > 0
					}
				}
				random_controlled_state = {
					limit = {
						steel_refinery_inactive > 0
					}
					enable_steel_mill = yes
				}
				subtract_from_temp_variable = {
					var = tempCoal
					value = 15
				}
				add_to_variable = {
					current_steel_mills = 1
				}
			}
		}
	}
	# close refineries to match player target
	if = {
		limit = {
			check_variable = {open_steel_mill_target < current_steel_mills}
		}
		while_loop_effect = {
			limit = {
				check_variable = {open_steel_mill_target < current_steel_mills}
				any_controlled_state = {
					or = {
						hydro_steel_refinery > 0
						steel_refinery > 0
					}
				}
			}
			if = {
				limit = {
					any_controlled_state = {
						not = {
							is_core_of = root
						}
						steel_refinery > 0
					}
				}
				random_controlled_state = {
					limit = {
						not = {
							is_core_of = root
						}
						steel_refinery > 0
					}
					disable_steel_mill = yes
				}
				subtract_from_variable = {
					current_steel_mills = 1
				}
			}
			else_if = {
				limit = {
					any_controlled_state = {
						not = {
							is_core_of = root
						}
						hydro_steel_refinery > 0
					}
				}
				random_controlled_state = {
					limit = {
						not = {
							is_core_of = root
						}
						hydro_steel_refinery > 0
					}
					disable_hydro_steel_mill = yes
				}
				subtract_from_variable = {
					current_steel_mills = 1
				}
			}
			else_if = {
				limit = {
					any_controlled_state = {
						steel_refinery > 0
					}
				}
				random_controlled_state = {
					limit = {
						steel_refinery > 0
					}
					disable_steel_mill = yes
				}
				subtract_from_variable = {
					current_steel_mills = 1
				}
				subtract_from_variable = {
					current_steel_mill_core = 1
				}
			}
			else_if = {
				limit = {
					any_controlled_state = {
						hydro_steel_refinery > 0
					}
				}
				random_controlled_state = {
					limit = {
						hydro_steel_refinery > 0
					}
					disable_hydro_steel_mill = yes
				}
				subtract_from_variable = {
					current_steel_mills = 1
				}
				subtract_from_variable = {
					current_steel_mill_core = 1
				}
			}
		}
	}
	set_variable = { previous_open_steel_mill_target = open_steel_mill_target }
}

manage_alu_mills = {
	# Automatically turn on new mills built since last update
	if = {
		limit = {
			check_variable = { current_alu_mill_core > previous_alu_mills_core }
			check_variable = { open_alu_mill_target = previous_open_alu_mill_target }
		}
		set_temp_variable = { tempMillDifference = current_alu_mill_core }
		subtract_from_temp_variable = { tempMillDifference = previous_alu_mills_core }
		add_to_variable = { open_alu_mill_target = tempMillDifference }
	}
	# close refineries from lack of resources
	if = {
		limit = {
			or = {
				check_variable = { resource@bauxite < 0 }
				check_variable = { resource@coal < 0 }
			}
			any_controlled_state = {
				or = {
					hydro_aluminium_refinery > 0
					aluminium_refinery > 0
				}
			}
		}
		set_temp_variable = { tempBauxite = resource@bauxite }
		set_temp_variable = { tempCoal = resource@coal }
		while_loop_effect = {
			limit = {
				OR = {
					check_variable = { tempBauxite < 0 }
					check_variable = { tempCoal < 0 }
				}
			}
			add_to_temp_variable = {
				var = tempBauxite
				value = 35
			}
			add_to_temp_variable = {
				var = tempCoal
				value = 20
			}
			if = {
				limit = {
					any_controlled_state = {
						not = {
							is_core_of = root
						}
						aluminium_refinery > 0
					}
				}
				random_controlled_state = {
					limit = {
						aluminium_refinery > 0
						not = {
							is_core_of = root
						}
					}
					disable_aluminium_mill = yes
				}
				subtract_from_variable = {
					current_alu_mills = 1
				}
			}
			else_if = {
				limit = {
					any_controlled_state = {
						not = {
							is_core_of = root
						}
						hydro_aluminium_refinery > 0
					}
				}
				random_controlled_state = {
					limit = {
						hydro_aluminium_refinery > 0
						not = {
							is_core_of = root
						}
					}
					disable_hydro_aluminium_mill = yes
				}
				subtract_from_temp_variable = {
					var = tempCoal
					value = 15
				}
				subtract_from_variable = {
					current_alu_mills = 1
				}
			}
			else_if = {
				limit = {
					any_controlled_state = {
						aluminium_refinery > 0
					}
				}
				random_controlled_state = {
					limit = {
						aluminium_refinery > 0
					}
					disable_aluminium_mill = yes
				}
				subtract_from_variable = {
					current_alu_mills = 1
				}
				subtract_from_variable = {
					current_alu_mill_core = 1
				}
			}
			else_if = {
				limit = {
					any_controlled_state = {
						hydro_aluminium_refinery > 0
					}
				}
				random_controlled_state = {
					limit = {
						hydro_aluminium_refinery > 0
					}
					disable_hydro_aluminium_mill = yes
				}
				subtract_from_temp_variable = {
					var = tempCoal
					value = 15
				}
				subtract_from_variable = {
					current_alu_mills = 1
				}
				subtract_from_variable = {
					current_alu_mill_core = 1
				}
			}
		}
	}
	# open refineries to match player target
	else_if = {
		limit = {
			check_variable = {open_alu_mill_target > current_alu_mills}
			check_variable = { resource@bauxite > 34 }
			check_variable = { resource@coal > 19 }
			any_controlled_state = {
				or = {
					hydro_aluminium_refinery_inactive > 0
					aluminium_refinery_inactive > 0
				}
			}
		}
		set_temp_variable = { tempBauxite = resource@bauxite }
		set_temp_variable = { tempCoal = resource@coal }
		while_loop_effect = {
			limit = {
				check_variable = {open_alu_mill_target > current_alu_mills}
				check_variable = {tempBauxite > 34}
				check_variable = {tempCoal > 19}
			}
			subtract_from_temp_variable = {
				var = tempBauxite
				value = 35
			}
			if = {
				limit = {
					any_controlled_state = {
						hydro_aluminium_refinery_inactive > 0
						is_core_of = root
					}
				}
				random_controlled_state = {
					limit = {
						hydro_aluminium_refinery_inactive > 0
						is_core_of = root
					}
					enable_hydro_aluminium_mill = yes
				}
				add_to_variable = {
					current_alu_mills = 1
				}
				add_to_variable = {
					current_alu_mill_core = 1
				}
			}
			else_if = {
				limit = {
					any_controlled_state = {
						aluminium_refinery_inactive > 0
						is_core_of = root
					}
				}
				random_controlled_state = {
					limit = {
						aluminium_refinery_inactive > 0
						is_core_of = root
					}
					enable_aluminium_mill = yes
				}
				subtract_from_temp_variable = {
					var = tempCoal
					value = 20
				}
				add_to_variable = {
					current_alu_mills = 1
				}
				add_to_variable = {
					current_alu_mill_core = 1
				}
			}
			else_if = {
				limit = {
					any_controlled_state = {
						hydro_aluminium_refinery_inactive > 0
					}
				}
				random_controlled_state = {
					limit = {
						hydro_aluminium_refinery_inactive > 0
					}
					enable_hydro_aluminium_mill = yes
				}
				add_to_variable = {
					current_alu_mills = 1
				}
			}
			else_if = {
				limit = {
					any_controlled_state = {
						aluminium_refinery_inactive > 0
					}
				}
				random_controlled_state = {
					limit = {
						aluminium_refinery_inactive > 0
					}
					enable_aluminium_mill = yes
				}
				subtract_from_temp_variable = {
					var = tempCoal
					value = 20
				}
				add_to_variable = {
					current_alu_mills = 1
				}
			}
		}
	}
	# close refineries to match player target
	if = {
		limit = {
			check_variable = {open_alu_mill_target < current_alu_mills}
		}
		while_loop_effect = {
			limit = {
				check_variable = {open_alu_mill_target < current_alu_mills}
				any_controlled_state = {
					or = {
						hydro_aluminium_refinery > 0
						aluminium_refinery > 0
					}
				}
			}
			if = {
				limit = {
					any_controlled_state = {
						not = {
							is_core_of = root
						}
						aluminium_refinery > 0
					}
				}
				random_controlled_state = {
					limit = {
						not = {
							is_core_of = root
						}
						aluminium_refinery > 0
					}
					disable_aluminium_mill = yes
				}
				subtract_from_variable = {
					current_alu_mills = 1
				}
			}
			else_if = {
				limit = {
					any_controlled_state = {
						not = {
							is_core_of = root
						}
						hydro_aluminium_refinery > 0
					}
				}
				random_controlled_state = {
					limit = {
						not = {
							is_core_of = root
						}
						hydro_aluminium_refinery > 0
					}
					disable_hydro_aluminium_mill = yes
				}
				subtract_from_variable = {
					current_alu_mills = 1
				}
			}
			else_if = {
				limit = {
					any_controlled_state = {
						aluminium_refinery > 0
					}
				}
				random_controlled_state = {
					limit = {
						aluminium_refinery > 0
					}
					disable_aluminium_mill = yes
				}
				subtract_from_variable = {
					current_alu_mills = 1
				}
				subtract_from_variable = {
					current_alu_mill_core = 1
				}
			}
			else_if = {
				limit = {
					any_controlled_state = {
						hydro_aluminium_refinery > 0
					}
				}
				random_controlled_state = {
					limit = {
						hydro_aluminium_refinery > 0
					}
					disable_hydro_aluminium_mill = yes
				}
				subtract_from_variable = {
					current_alu_mills = 1
				}
				subtract_from_variable = {
					current_alu_mill_core = 1
				}
			}
		}
	}
	set_variable = { previous_open_alu_mill_target = open_alu_mill_target }
}

manage_synth = {
	# Automatically turn on new mills built since last update
	if = {
		limit = {
			check_variable = { current_synth_core > previous_synth_core }
			check_variable = { open_synth_target = previous_open_synth_target }
		}
		set_temp_variable = { tempMillDifference = current_synth_core }
		subtract_from_temp_variable = { tempMillDifference = previous_synth_core }
		add_to_variable = { open_synth_target = tempMillDifference }
	}
	# close refineries from lack of resources
	if = {
		limit = {
			check_variable = { resource@coal < 0 }
			any_controlled_state = {
				synthetic_refinery > 0
			}
		}
		set_temp_variable = { tempCoal = resource@coal }
		while_loop_effect = {
			limit = {
				check_variable = { tempCoal < 0 }
			}
			add_to_temp_variable = {
				var = tempCoal
				value = 60
			}
			if = {
				limit = {
					any_controlled_state = {
						not = {
							is_core_of = root
						}
						synthetic_refinery > 0
					}
				}
				random_controlled_state = {
					limit = {
						synthetic_refinery > 0
						not = {
							is_core_of = root
						}
					}
					disable_synth = yes
				}
				subtract_from_variable = {
					current_synth = 1
				}
			}
			else_if = {
				limit = {
					any_controlled_state = {
						synthetic_refinery > 0
					}
				}
				random_controlled_state = {
					limit = {
						synthetic_refinery > 0
					}
					disable_synth = yes
				}
				subtract_from_variable = {
					current_synth = 1
				}
				subtract_from_variable = {
					current_synth_core = 1
				}
			}
		}
	}
	# open refineries to match player target
	else_if = {
		limit = {
			check_variable = {open_synth_target > current_synth}
			check_variable = { resource@coal > 59 }
			any_controlled_state = {
				synthetic_refinery_inactive > 0
			}
		}
		set_temp_variable = { tempCoal = resource@coal }
		while_loop_effect = {
			limit = {
				check_variable = {open_synth_target > current_synth}
				check_variable = {tempCoal > 59}
			}
			subtract_from_temp_variable = {
				var = tempCoal
				value = 60
			}
			if = {
				limit = {
					any_controlled_state = {
						synthetic_refinery_inactive > 0
						is_core_of = root
					}
				}
				random_controlled_state = {
					limit = {
						synthetic_refinery_inactive > 0
						is_core_of = root
					}
					enable_synth = yes
				}
				add_to_variable = {
					current_synth = 1
				}
				add_to_variable = {
					current_synth_core = 1
				}
			}
			else_if = {
				limit = {
					any_controlled_state = {
						synthetic_refinery_inactive > 0
					}
				}
				random_controlled_state = {
					limit = {
						synthetic_refinery_inactive > 0
					}
					enable_synth = yes
				}
				add_to_variable = {
					current_synth = 1
				}
			}
		}
	}
	# close refineries to match player target
	if = {
		limit = {
			check_variable = {open_synth_target < current_synth}
		}
		while_loop_effect = {
			limit = {
				check_variable = {open_synth_target < current_synth}
				any_controlled_state = {
					synthetic_refinery > 0
				}
			}
			if = {
				limit = {
					any_controlled_state = {
						not = {
							is_core_of = root
						}
						synthetic_refinery > 0
					}
				}
				random_controlled_state = {
					limit = {
						not = {
							is_core_of = root
						}
						synthetic_refinery > 0
					}
					disable_synth = yes
				}
				subtract_from_variable = {
					current_synth = 1
				}
			}
			else_if = {
				limit = {
					any_controlled_state = {
						synthetic_refinery > 0
					}
				}
				random_controlled_state = {
					limit = {
						synthetic_refinery > 0
					}
					disable_synth = yes
				}
				subtract_from_variable = {
					current_synth = 1
				}
				subtract_from_variable = {
					current_synth_core = 1
				}
			}
		}
	}
	set_variable = { previous_open_synth_target = open_synth_target }
}

calculate_resource_deficite = {
	set_variable = { current_iron = resource@iron }
	set_variable = { current_bauxite = resource@bauxite }
	set_variable = { current_coal = resource@coal }
	set_variable = { need_iron = 0 }
	set_variable = { need_bauxite = 0 }
	set_variable = { need_coal = 0 }

	if = {
		limit = {
			check_variable = {
				current_steel_mills < open_steel_mill_target
			}
		}
		# need_iron = (open_steel_mill_target - current_steel_mills) * 25
		set_temp_variable = { tempIron = open_steel_mill_target }
		subtract_from_temp_variable = { tempIron = current_steel_mills }
		set_variable = { tempCoal = tempIron }
		multiply_temp_variable = { tempIron = 25 }
		multiply_temp_variable = { tempCoal = 20 }
		set_variable = { need_iron = tempIron }
		set_variable = { need_coal = tempCoal }
		subtract_from_variable = { need_iron = current_iron }
		clamp_variable = {
			var = need_iron
			min = 0
		}
	}

	if = {
		limit = {
			check_variable = {
				current_alu_mills < open_alu_mill_target
			}
		}
		set_temp_variable = { tempBauxite = open_alu_mill_target }
		subtract_from_temp_variable = { tempBauxite = current_alu_mills }
		set_variable = { tempCoal = tempBauxite }
		multiply_temp_variable = { tempBauxite = 35 }
		multiply_temp_variable = { tempCoal = 20 }
		set_variable = { need_bauxite = tempBauxite }
		add_to_variable = { need_coal = tempCoal }
		subtract_from_variable = { need_bauxite = current_bauxite}
		clamp_variable = {
			var = need_bauxite
			min = 0
		}
	}

	if = {
		limit = {
			check_variable = {
				current_synth < open_synth_target
			}
		}
		set_temp_variable = { tempCoal = open_synth_target }
		subtract_from_temp_variable = { tempCoal = current_synth }
		multiply_temp_variable = { tempCoal = 60 }
		add_to_variable = { need_coal = tempCoal }
		subtract_from_variable = { need_coal = current_coal }
		clamp_variable = {
			var = need_coal
			min = 0
		}
	}
}