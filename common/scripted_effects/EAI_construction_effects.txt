############################################################################################################
#	Expert AI mod - scripted construction AI effects
############################################################################################################

######################################################
# 	priority construction AI
######################################################

EAI_PC_set_global_variables = {

	### BUILDING CONSTRUCTION COSTS

	set_variable = { global.EAI_PC_BUILDING_RAILWAY_COST		  = 3000 }
	set_variable = { global.EAI_PC_BUILDING_INFRASTRUCTURE_COST   = 3000 }
	set_variable = { global.EAI_PC_BUILDING_AIRBASE_COST          = 500 }
	set_variable = { global.EAI_PC_BUILDING_ANTIAIR_COST          = 4000 }
	set_variable = { global.EAI_PC_BUILDING_RADAR_COST            = 3375 }
	set_variable = { global.EAI_PC_BUILDING_MILITARY_FACTORY_COST = 7200 }
	set_variable = { global.EAI_PC_BUILDING_CIVILIAN_FACTORY_COST = 10800 }
	set_variable = { global.EAI_PC_BUILDING_DOCKYARD_COST         = 6400 }
	set_variable = { global.EAI_PC_BUILDING_REFINERY_COST         = 14500 }
	set_variable = { global.EAI_PC_CONVERSION_COST_MIL_TO_CIV     = 9000 }
	set_variable = { global.EAI_PC_CONVERSION_COST_CIV_TO_MIL     = 9000 }
	set_variable = { global.EAI_PC_BUILDING_HYDROPOWEREDSTEELMILL_COST         = 12500 }
	set_variable = { global.EAI_PC_BUILDING_HYDROPOWEREDALUMINIUMSMELTER_COST  = 12500 }

	###

	every_country = {
		resize_array = { array = EAI_PC_project_array value = 0 size = 5 }

		add_dynamic_modifier = { modifier = EAI_PC_project_assigned_factories_modifier }
	}
}

EAI_PC_get_building_values = {

	if = { limit = { check_variable = { EAI_PC_project_building_type^EAI_PC_project_type = 1 } }

		set_temp_variable = { EAI_PC_building_cost = global.EAI_PC_BUILDING_INFRASTRUCTURE_COST }
		add_to_temp_variable = { EAI_PC_construction_speed = modifier@production_speed_infrastructure_factor }
	}

	else_if = { limit = { check_variable = { EAI_PC_project_building_type^EAI_PC_project_type = 2 } }

		set_temp_variable = { EAI_PC_building_cost = global.EAI_PC_BUILDING_AIRBASE_COST }
		add_to_temp_variable = { EAI_PC_construction_speed = modifier@production_speed_air_base_factor }
	}

	else_if = { limit = { check_variable = { EAI_PC_project_building_type^EAI_PC_project_type = 3 } }

		set_temp_variable = { EAI_PC_building_cost = global.EAI_PC_BUILDING_ANTIAIR_COST }
		add_to_temp_variable = { EAI_PC_construction_speed = modifier@production_speed_anti_air_building_factor }
	}

	else_if = { limit = { check_variable = { EAI_PC_project_building_type^EAI_PC_project_type = 4 } }

		set_temp_variable = { EAI_PC_building_cost = global.EAI_PC_BUILDING_RADAR_COST }
		add_to_temp_variable = { EAI_PC_construction_speed = modifier@production_speed_radar_station_factor }
	}

	else_if = { limit = { check_variable = { EAI_PC_project_building_type^EAI_PC_project_type = 5 } }

		set_temp_variable = { EAI_PC_building_cost = global.EAI_PC_BUILDING_MILITARY_FACTORY_COST }
		add_to_temp_variable = { EAI_PC_construction_speed = modifier@production_speed_arms_factory_factor }
	}

	else_if = { limit = { check_variable = { EAI_PC_project_building_type^EAI_PC_project_type = 6 } }

		set_temp_variable = { EAI_PC_building_cost = global.EAI_PC_BUILDING_CIVILIAN_FACTORY_COST }
		add_to_temp_variable = { EAI_PC_construction_speed = modifier@production_speed_industrial_complex_factor }
	}

	else_if = { limit = { check_variable = { EAI_PC_project_building_type^EAI_PC_project_type = 7 } }

		set_temp_variable = { EAI_PC_building_cost = global.EAI_PC_BUILDING_DOCKYARD_COST }
		add_to_temp_variable = { EAI_PC_construction_speed = modifier@production_speed_dockyard_factor }
	}

	else_if = { limit = { check_variable = { EAI_PC_project_building_type^EAI_PC_project_type = 8 } }

		set_temp_variable = { EAI_PC_building_cost = global.EAI_PC_BUILDING_REFINERY_COST }
		add_to_temp_variable = { EAI_PC_construction_speed = modifier@production_speed_synthetic_refinery_factor }
	}

	else_if = { limit = { check_variable = { EAI_PC_project_building_type^EAI_PC_project_type = 9 } }

		set_temp_variable = { EAI_PC_building_cost = global.EAI_PC_CONVERSION_COST_MIL_TO_CIV }

		set_temp_variable = { t1 = modifier@conversion_cost_mil_to_civ_factor }
		add_to_temp_variable = { t1 = 1.0 }
		multiply_temp_variable = { EAI_PC_building_cost = t1 }

		add_to_temp_variable = { EAI_PC_construction_speed = modifier@production_speed_industrial_complex_factor }
	}

	else_if = { limit = { check_variable = { EAI_PC_project_building_type^EAI_PC_project_type = 10 } }

		set_temp_variable = { EAI_PC_building_cost = global.EAI_PC_CONVERSION_COST_CIV_TO_MIL }

		set_temp_variable = { t4 = modifier@conversion_cost_civ_to_mil_factor }
		add_to_temp_variable = { t4 = 1.0 }
		multiply_temp_variable = { EAI_PC_building_cost = t4 }

		add_to_temp_variable = { EAI_PC_construction_speed = modifier@production_speed_arms_factory_factor }
	}

	else_if = { limit = { check_variable = { EAI_PC_project_building_type^EAI_PC_project_type = 11 } }

		set_temp_variable = { EAI_PC_building_cost = global.EAI_PC_BUILDING_HYDROPOWEREDSTEELMILL_COST }
		add_to_temp_variable = { EAI_PC_construction_speed = modifier@production_speed_hydro_steel_refinery_factor }
	}

	else_if = { limit = { check_variable = { EAI_PC_project_building_type^EAI_PC_project_type = 12 } }

		set_temp_variable = { EAI_PC_building_cost = global.EAI_PC_BUILDING_HYDROPOWEREDALUMINIUMSMELTER_COST }
		add_to_temp_variable = { EAI_PC_construction_speed = modifier@production_speed_hydro_aluminium_refinery_factor }
	}

	add_to_temp_variable = { EAI_PC_construction_speed = modifier@production_speed_buildings_factor }
}

EAI_PC_get_available_project = {

	for_each_loop = { array = EAI_PC_project_array

		if = { limit = { check_variable = { v = 0 } }

			set_variable = { EAI_PC_new_project = i }
			set_temp_variable = { break = 1 }
		}
	}
}

EAI_PC_add_finished_building = {

	if = { limit = { ROOT = { check_variable = { EAI_PC_project_building_type^EAI_PC_project = 1 } } }

		add_building_construction = { type = infrastructure level = 1 instant_build = yes }
	}

	else_if = { limit = { ROOT = { check_variable = { EAI_PC_project_building_type^EAI_PC_project = 2 } } }

		add_building_construction = { type = air_base level = 1 instant_build = yes }
	}

	else_if = { limit = { ROOT = { check_variable = { EAI_PC_project_building_type^EAI_PC_project = 3 } } }

		add_building_construction = { type = anti_air_building level = 1 instant_build = yes }
	}

	else_if = { limit = { ROOT = { check_variable = { EAI_PC_project_building_type^EAI_PC_project = 4 } } }

		add_building_construction = { type = radar_station level = 1 instant_build = yes }
	}

	else_if = { limit = { ROOT = { check_variable = { EAI_PC_project_building_type^EAI_PC_project = 5 } } }

		add_building_construction = { type = arms_factory level = 1 instant_build = yes }
	}

	else_if = { limit = { ROOT = { check_variable = { EAI_PC_project_building_type^EAI_PC_project = 6 } } }

		add_building_construction = { type = industrial_complex level = 1 instant_build = yes }
	}

	else_if = { limit = { ROOT = { check_variable = { EAI_PC_project_building_type^EAI_PC_project = 7 } } }

		add_building_construction = { type = dockyard level = 1 instant_build = yes }
	}

	else_if = { limit = { ROOT = { check_variable = { EAI_PC_project_building_type^EAI_PC_project = 8 } } }

		add_building_construction = { type = synthetic_refinery level = 1 instant_build = yes }
	}

	else_if = { limit = { ROOT = { check_variable = { EAI_PC_project_building_type^EAI_PC_project = 9 } } }

		remove_building = { type = arms_factory level = 1 }
		add_building_construction = { type = industrial_complex level = 1 instant_build = yes }
	}

	else_if = { limit = { ROOT = { check_variable = { EAI_PC_project_building_type^EAI_PC_project = 10 } } }

		remove_building = { type = industrial_complex level = 1 }
		add_building_construction = { type = arms_factory level = 1 instant_build = yes }
	}

	else_if = { limit = { ROOT = { check_variable = { EAI_PC_project_building_type^EAI_PC_project = 11 } } }

		add_building_construction = { type = hydro_steel_refinery level = 1 instant_build = yes }
	}

	else_if = { limit = { ROOT = { check_variable = { EAI_PC_project_building_type^EAI_PC_project = 12 } } }

		add_building_construction = { type = hydro_aluminium_refinery level = 1 instant_build = yes }
	}
}

EAI_PC_init_project = {

	ROOT = {

		### get construction speed modifiers and set building cost

		set_temp_variable = { EAI_PC_construction_speed = 1 }

		EAI_PC_get_building_values = yes

		### level price effect

		if = { limit = { check_variable = { EAI_PC_project_building_type^EAI_PC_project_type = 1 } }

		 	set_temp_variable = { EAI_PC_target_state_infra = PREV.infrastructure_level }
		#	add_to_temp_variable = { EAI_PC_target_state_infra = -1 }
		 	multiply_temp_variable = { EAI_PC_target_state_infra = 100 }
		 	add_to_temp_variable = { EAI_PC_building_cost = EAI_PC_target_state_infra }
		}

		if = { limit = { check_variable = { EAI_PC_project_building_type^EAI_PC_project_type = 2 } }

			set_temp_variable = { EAI_PC_target_state_airbase = PREV.building_level@air_base }
			# add_to_temp_variable = { EAI_PC_target_state_airbase = -1 }
			multiply_temp_variable = { EAI_PC_target_state_airbase = 250 }
			add_to_temp_variable = { EAI_PC_building_cost = EAI_PC_target_state_airbase }
		}

		if = { limit = { check_variable = { EAI_PC_project_building_type^EAI_PC_project_type = 4 } }

			set_temp_variable = { EAI_PC_target_state_radar_station = PREV.building_level@radar_station }
			# add_to_temp_variable = { EAI_PC_target_state_radar_station = -1 }
			multiply_temp_variable = { EAI_PC_target_state_radar_station = 500 }
			add_to_temp_variable = { EAI_PC_building_cost = EAI_PC_target_state_radar_station }
		}

		### infrastructure effect (5-12 use infrastructure effect)

		if = { limit = { check_variable = { EAI_PC_project_building_type^EAI_PC_project_type > 4 } }

			set_temp_variable = { EAI_PC_target_state_infra_speed = PREV.infrastructure_level }
			multiply_temp_variable = { EAI_PC_target_state_infra_speed = 0.1 }
			add_to_temp_variable = { EAI_PC_target_state_infra_speed = 1 }
			multiply_temp_variable = { EAI_PC_construction_speed = EAI_PC_target_state_infra_speed }
		}

		### total factory output

		multiply_temp_variable = { EAI_PC_construction_speed = 2.5 }
		multiply_temp_variable = { EAI_PC_construction_speed = EAI_PC_project_assigned_factories^EAI_PC_project_type }

		### days to build

		divide_temp_variable = { EAI_PC_building_cost = EAI_PC_construction_speed }

		set_variable = { EAI_PC_project_construction_duration^EAI_PC_project = EAI_PC_building_cost }
		round_variable = EAI_PC_project_construction_duration^EAI_PC_project
	}
}

### projects

@AI_MAX_FRACTION_OF_FACTORIES_TO_ASSIGN_ON_PROJECTS_TOTAL = 0.35
@AI_MAX_FRACTION_OF_FACTORIES_TO_ASSIGN_ON_PROJECT = 0.15
@AI_MIN_NUM_OF_FACTORIES_TO_ASSIGN_ON_PROJECT = 20

# create a new project
EAI_PC_start_project = {
	# set_country_flag = test_start_project

	# is not already building the same type of building here
	if = {
		limit = {
			if = { limit = { is_in_array = { THIS.EAI_PC_projects_in_state = ROOT.id } }

				NOT = { check_variable = { ROOT.EAI_PC_project_building_type^THIS.EAI_PC_project_target_state_@ROOT = ROOT.EAI_PC_project_building_type^-1 } }
			}
			else = { always = yes }
		}

		ROOT = {

			set_temp_variable = { EAI_PC_project_assigned_factories^-1 = 0 }

			# check that the ai can afford to assign factories to a new project
			set_temp_variable = { max_factories_on_projects = num_of_civilian_factories_available_for_projects }
			add_to_temp_variable = { max_factories_on_projects = EAI_PC_assigned_factories_total }
			multiply_temp_variable = { max_factories_on_projects = @AI_MAX_FRACTION_OF_FACTORIES_TO_ASSIGN_ON_PROJECTS_TOTAL }

			set_temp_variable = { min_factories_on_projects = EAI_PC_assigned_factories_total }
			add_to_temp_variable = { min_factories_on_projects = @AI_MIN_NUM_OF_FACTORIES_TO_ASSIGN_ON_PROJECT }

			if = { limit = { check_variable = { EAI_PC_ignore_factory_limit = 1 } }

				set_temp_variable = { EAI_PC_project_assigned_factories^-1 = num_of_civilian_factories_available_for_projects }
				clamp_temp_variable = { var = EAI_PC_project_assigned_factories^-1 min = 0 max = 20 }

				set_temp_variable = { EAI_PC_ignore_factory_limit = 0 }
			}
			else_if = { limit = { check_variable = { min_factories_on_projects < max_factories_on_projects } }

				if = { limit = { has_country_flag = EAI_construction_logging } log = "max_factories_on_projects = [?max_factories_on_projects], min_factories_on_projects = [?min_factories_on_projects], EAI_PC_assigned_factories_total = [?EAI_PC_assigned_factories_total]" }
				set_temp_variable = { EAI_PC_project_assigned_factories^-1 = max_factories_on_projects }
				subtract_from_temp_variable = { EAI_PC_project_assigned_factories^-1 = EAI_PC_assigned_factories_total }
				round_temp_variable = EAI_PC_project_assigned_factories^-1
				clamp_temp_variable = { var = EAI_PC_project_assigned_factories^-1 min = 3 max = 20 }
			}
		}



		if = { limit = { ROOT = {check_variable = { EAI_PC_project_assigned_factories^-1 > 0 }}}

			ROOT = { EAI_PC_get_available_project = yes }

			if = { limit = { ROOT = { has_variable = EAI_PC_new_project } }

				ROOT = {
					set_variable = { EAI_PC_project = EAI_PC_new_project }
					set_variable = { EAI_PC_project_type = -1 }
				}

				EAI_PC_init_project = yes

				THIS = {

					add_to_array = { EAI_PC_projects_in_state = ROOT.id }
					set_variable = { EAI_PC_project_target_state_@ROOT = ROOT.EAI_PC_project }
					set_variable = { ROOT.EAI_PC_project_array^ROOT.EAI_PC_project = THIS.id }
					CONTROLLER = { set_variable = { ROOT.EAI_PC_project_target_country^ROOT.EAI_PC_project = THIS.id } }
				}

				ROOT = {

					### active project variables

					set_variable = { EAI_PC_project_assigned_factories^EAI_PC_project = EAI_PC_project_assigned_factories^-1 }
					set_variable = { EAI_PC_project_building_type^EAI_PC_project = ROOT.EAI_PC_project_building_type^-1 }

					add_to_variable = { EAI_PC_assigned_factories_total = EAI_PC_project_assigned_factories^EAI_PC_project }
					force_update_dynamic_modifier = yes

					### activate project

					add_to_variable = { EAI_PC_active_projects = 1 }

					meta_effect = {
						text = {
							activate_decision = EAI_PC_project_[x]_decision
						}
						x = "[?ROOT.EAI_PC_project]"
					}

					clear_variable = EAI_PC_project
					clear_variable = EAI_PC_project_type
					clear_variable = EAI_PC_new_project

					if = { limit = { has_country_flag = EAI_construction_logging } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | PRIORITY CONSTRUCTION: type = [?ROOT.EAI_PC_project_building_type^-1], civ = [?EAI_PC_project_assigned_factories^-1], loc = [PREV.GetName], days = [?EAI_PC_project_construction_duration^EAI_PC_project]" }
				}
			}
		}
	}
}

# executed when a project finishes a building
EAI_PC_complete_project = {

	if = { limit = { check_variable = { EAI_PC_project_array^EAI_PC_project < 0 } }

		set_variable = { EAI_PC_project_type = EAI_PC_project }

		var:EAI_PC_project_array^EAI_PC_project = {

			if = {
				limit = {
					CONTROLLER = {
						tag = ROOT
					}
					EAI_PC_building_slot_available = yes
				}

				EAI_PC_add_finished_building = yes
			}

			ROOT = { EAI_PC_end_project = yes }
		}
	}

	clear_variable = EAI_PC_project
	clear_variable = EAI_PC_project_type
}

# resets a project
EAI_PC_end_project = {

	if = { limit = { check_variable = { EAI_PC_project_array^EAI_PC_project < 0 } }

		var:EAI_PC_project_array^EAI_PC_project = {
			clear_variable = EAI_PC_project_target_state_@PREV
			remove_from_array = { array = EAI_PC_projects_in_state value = PREV.id }
		}

		meta_effect = {
			text = {
				set_variable = { EAI_PC_project_array^EAI_PC_project = 1 }
				country_event = { id = EAI_PC_event.1[x] hours = 26 }
			}
			x = "[?EAI_PC_project]"
		}

		subtract_from_variable = { EAI_PC_assigned_factories_total = EAI_PC_project_assigned_factories^EAI_PC_project }
		force_update_dynamic_modifier = yes

		clear_variable = EAI_PC_project_assigned_factories^EAI_PC_project
		clear_variable = EAI_PC_project_building_type^EAI_PC_project
		clear_variable = EAI_PC_project_construction_duration^EAI_PC_project
		clear_variable = EAI_PC_project_target_country^EAI_PC_project
	}

	clear_variable = EAI_PC_project
}

##########################################

EAI_priority_construction_strategies = {


	if = { limit = { check_variable = { ROOT.EAI_PC_active_projects < 5 }  }

		if = { limit = { EAI_PC_can_afford_project = yes }

			EAI_important_radar_constructions = yes

			EAI_build_refinery_resource_shortage_steel = yes

			EAI_build_refinery_resource_shortage_aluminium = yes

			EAI_build_supply_line_GER_SOV = yes

			EAI_build_supply_line_JAP_RAJ = yes

			EAI_improve_north_africa_infrastructure = yes

			EAI_resource_extraction = yes
		}

		# EAI_convert_MIC_to_CIC_industrial_expansion = yes not needed in WA
	}
}

### priority construction strategies

EAI_important_radar_constructions = {

	if = {
		limit = {
			check_variable = { ROOT.EAI_PC_active_projects < 5 }
			threat > 0.3
			num_of_civilian_factories_available_for_projects > 15
			any_of_scopes = { array = controlled_states EAI_radar_location_2 = yes EAI_available_RADAR = yes }
		}

		set_variable = { ROOT.EAI_PC_project_building_type^-1 = 4 }
		random_scope_in_array = { array = controlled_states limit = { EAI_radar_location_2 = yes EAI_available_RADAR = yes EAI_PC_can_build_project = yes }
			EAI_PC_start_project = yes
		}
	}
}

EAI_improve_north_africa_infrastructure = {

	if = {
		limit = {
			OR = {
				tag = ITA
				tag = ITL
			}

			date > 1937.6.1
		}

		set_temp_variable = { supply_line_start = 448.id } # tripoli
		set_temp_variable = { supply_line_target = 446.id } # cairo
		EAI_build_supply_line = yes
	}

	if = {
		limit = {
			OR = {
				tag = ENG
				tag = UKE
			}
			date > 1937.6.1
		}

		set_temp_variable = { supply_line_start = 446.id }
		set_temp_variable = { supply_line_target = 448.id }
		EAI_build_supply_line = yes
	}

	# if = {
	# 	limit = {
	# 		check_variable = { ROOT.EAI_PC_active_projects < 5 }

	# 		OR = {
	# 			AND = {
	# 				has_war = yes

	# 				num_of_civilian_factories_available_for_projects > 15

	# 				any_enemy_country = {
	# 					any_of_scopes = { array = controlled_states
	# 						OR = { region = 126 region = 128 }
	# 					}
	# 				}
	# 			}

	# 			AND = {
	# 				tag = ITA
	# 				date > 1938.1.1
	# 			}
	# 		}

	# 		any_of_scopes = { array = controlled_states

	# 			OR = { region = 126 state = 452 state = 447 state = 446 }
	# 			is_coastal = yes
	# 			free_building_slots = { building = infrastructure size > 0 include_locked = no }
	# 			infrastructure < 8
	# 		}
	# 	}

	# 	set_variable = { ROOT.EAI_PC_project_building_type^-1 = 1 }

	# 	set_temp_variable = { EAI_best_target = 0 }
	# 	set_temp_variable = { EAI_best_target_score = 0 }

	# 	# find the best target
	# 	for_each_scope_loop = { array = controlled_states

	# 		if = {
	# 			limit = {
	# 				OR = { region = 126 state = 452 state = 447 state = 446 }
	# 				is_coastal = yes
	# 				EAI_PC_can_build_project = yes
	# 				infrastructure < 8
	# 			}

	# 			# get score
	# 			set_variable = { EAI_score = 10 }
	# 			subtract_from_variable = { EAI_score = building_level@infrastructure }
	# 			if = { limit = { NOT = { EAI_no_enemy_border = yes } } multiply_variable = { EAI_score = 1.5 } }

	# 			# compare with best score
	# 			if = { limit = { check_variable = { EAI_score > EAI_best_target_score } }

	# 				set_temp_variable = { EAI_best_target = THIS.id }
	# 				set_temp_variable = { EAI_best_target_score = EAI_score }
	# 			}
	# 		}
	# 	}

	# 	# target was found
	# 	if = { limit = { check_variable = { EAI_best_target_score > 0 } }

	# 		var:EAI_best_target = { EAI_PC_start_project = yes }
	# 	}
	# }
}

EAI_resource_extraction = {

	if = {
		limit = {
			num_of_civilian_factories_available_for_projects > 30

			# any state exists with significant resources and there is a need for it
			any_of_scopes = { array = controlled_states

				EAI_PC_can_build_project = yes

				OR = {
					AND = { has_resources_amount = { resource = oil amount > 20 } 			ROOT = { has_war = yes fuel_ratio < 0.8 } }
					# AND = { has_resources_amount = { resource = aluminium amount > 20 } 	check_variable = { ROOT.EAI_needs_aluminium = 3 } }
					AND = { has_resources_amount = { resource = rubber amount > 20 } 		check_variable = { ROOT.EAI_needs_rubber = 3 } }
					AND = { has_resources_amount = { resource = tungsten amount > 20 } 		check_variable = { ROOT.EAI_needs_tungsten = 3 } }
					# AND = { has_resources_amount = { resource = steel amount > 20 } 		check_variable = { ROOT.EAI_needs_steel = 3 } }
					AND = { has_resources_amount = { resource = chromium amount > 20 } 		check_variable = { ROOT.EAI_needs_chromium = 3 } }
					AND = { has_resources_amount = { resource = coal amount > 100 } 		check_variable = { ROOT.EAI_needs_coal = 3 } }
					AND = { has_resources_amount = { resource = bauxite amount > 15 } 		check_variable = { ROOT.EAI_needs_bauxite = 3 } }
					AND = { has_resources_amount = { resource = iron amount > 20 } 	    	check_variable = { ROOT.EAI_needs_iron = 3 } }
				}
			}
		}

		EAI_priority_queue_INF_resource = yes
	}
}

EAI_build_refinery_resource_shortage_rubber = {

	### track rubber shortage

	if = {
		limit = {
			# there is a rubber deficit
			check_variable = { resource@rubber < 0 }

			# total rubber needed for production
			set_temp_variable = { rubber_needed = resource_consumed@rubber }
			multiply_temp_variable = { rubber_needed = -1 }
			add_to_temp_variable = { rubber_needed = resource@rubber }

			# deficit is >5% of total need
			set_temp_variable = { rubber_deficit = resource@rubber }
			divide_temp_variable = { rubber_deficit = rubber_needed }
			check_variable = { rubber_deficit > 0.05 }
		}

		add_to_variable = { EAI_resource_rubber_shortage_months = 1 }
	}
	else = {
		subtract_from_variable = { EAI_resource_rubber_shortage_months = 1 }
	}

	clamp_variable = { var = EAI_resource_rubber_shortage_months min = 0 max = 3 }

	###

	if = {
		limit = {
			check_variable = { ROOT.EAI_PC_active_projects < 5 }

			NOT = { num_of_civilian_factories_available_for_projects < 20 }

			# resource shortage
			check_variable = { EAI_resource_rubber_shortage_months = 3 }
		}

		EAI_priority_queue_synthetic_refinery = yes
	}

	###

	else_if = {
		limit = {
			check_variable = { ROOT.EAI_PC_active_projects < 5 }

			NOT = { num_of_civilian_factories_available_for_projects < 20 }

			# resource shortage
			check_variable = { EAI_resource_steel_shortage_months = 3 }

			# over 50% of factories are mil
			set_temp_variable = { mil_factories = num_of_military_factories }
			divide_temp_variable = { mil_factories = num_of_factories }
			check_variable = { mil_factories > 0.4 }

			# no factory slots left
			NOT = {
				any_of_scopes = { array = controlled_states
					EAI_available_SHARED = yes
				}
			}
		}

		EAI_priority_convert_MIC_to_CIC = yes
	}
}



EAI_build_refinery_resource_shortage_steel = {

	### track steel shortage

	if = {
		limit = {
			# there is a steel deficit / we have enough industry to invest
			OR = {
				check_variable = { resource@steel < 0 }
				AND = {
					check_variable = { resource@iron > -1 }
					check_variable = { resource_imported@steel > 0 }
				}
			}
			OR = {
				num_of_available_civilian_factories > 19
				check_variable = { resource_imported@steel > 80 }
			}


			# # total steel needed for production
			# set_temp_variable = { steel_needed = resource_consumed@steel }
			# multiply_temp_variable = { steel_needed = -1 }
			# add_to_temp_variable = { steel_needed = resource@steel }

			# # deficit is >5% of total need
			# set_temp_variable = { steel_deficit = resource@steel }
			# divide_temp_variable = { steel_deficit = steel_needed }
			# check_variable = { steel_deficit > 0.05 }
		}

		add_to_variable = { EAI_resource_steel_shortage_months = 1 }
	}
	else = {
		subtract_from_variable = { EAI_resource_steel_shortage_months = 1 }
	}

	clamp_variable = { var = EAI_resource_steel_shortage_months min = 0 max = 3 }

	###

	if = {
		limit = {
			check_variable = { ROOT.EAI_PC_active_projects < 5 }

			NOT = { num_of_civilian_factories_available_for_projects < 20 }

			# resource shortage
			check_variable = { EAI_resource_steel_shortage_months = 3 }
		}

		EAI_priority_queue_hydro_steel_refinery = yes
	}

	###

	else_if = {
		limit = {
			check_variable = { ROOT.EAI_PC_active_projects < 5 }

			NOT = { num_of_civilian_factories_available_for_projects < 20 }

			# resource shortage
			check_variable = { EAI_resource_steel_shortage_months = 3 }

			# over 50% of factories are mil
			set_temp_variable = { mil_factories = num_of_military_factories }
			divide_temp_variable = { mil_factories = num_of_factories }
			check_variable = { mil_factories > 0.4 }

			# no factory slots left
			NOT = {
				any_of_scopes = { array = controlled_states
					EAI_available_SHARED = yes
				}
			}
		}

		EAI_priority_convert_MIC_to_CIC = yes
	}
}

EAI_build_refinery_resource_shortage_aluminium = {

	### track aluminium shortage

	if = {
		limit = {
			# there is a aluminium deficit
			OR = {
				check_variable = { resource@aluminium < 0 }
				AND = {
					check_variable = { resource@bauxite > -1 }
					check_variable = { resource_imported@aluminium > 0 }
				}
			}
			OR = {
				num_of_available_civilian_factories > 19
				check_variable = { resource_imported@aluminium > 80 }
			}

			# # total aluminium needed for production
			# set_temp_variable = { aluminium_needed = resource_consumed@aluminium }
			# multiply_temp_variable = { aluminium_needed = -1 }
			# add_to_temp_variable = { aluminium_needed = resource@aluminium }

			# # deficit is >5% of total need
			# set_temp_variable = { aluminium_deficit = resource@aluminium }
			# divide_temp_variable = { aluminium_deficit = aluminium_needed }
			# check_variable = { aluminium_deficit > 0.05 }
		}

		add_to_variable = { EAI_resource_aluminium_shortage_months = 1 }
	}
	else = {
		subtract_from_variable = { EAI_resource_aluminium_shortage_months = 1 }
	}

	clamp_variable = { var = EAI_resource_aluminium_shortage_months min = 0 max = 3 }

	###

	if = {
		limit = {
			check_variable = { ROOT.EAI_PC_active_projects < 5 }

			NOT = { num_of_civilian_factories_available_for_projects < 20 }

			# resource shortage
			check_variable = { EAI_resource_aluminium_shortage_months = 3 }
		}

		EAI_priority_queue_hydro_aluminium_refinery = yes
	}

	###

	else_if = {
		limit = {
			check_variable = { ROOT.EAI_PC_active_projects < 5 }

			NOT = { num_of_civilian_factories_available_for_projects < 20 }

			# resource shortage
			check_variable = { EAI_resource_aluminium_shortage_months = 3 }

			# over 50% of factories are mil
			set_temp_variable = { mil_factories = num_of_military_factories }
			divide_temp_variable = { mil_factories = num_of_factories }
			check_variable = { mil_factories > 0.4 }

			# no factory slots left
			NOT = {
				any_of_scopes = { array = controlled_states
					EAI_available_SHARED = yes
				}
			}
		}

		EAI_priority_convert_MIC_to_CIC = yes
	}
}

EAI_build_supply_line_GER_SOV = {

	if = {
		limit = {
			tag = GER
			has_war_with = SOV
			SOV = { has_capitulated = no }
		}

		set_temp_variable = { supply_line_start = GER.capital }
		set_temp_variable = { supply_line_target = SOV.capital }
		EAI_build_supply_line = yes
	}

	else_if = {
		limit = {
			tag = SOV
			has_war_with = GER
			GER = {
				has_capitulated = no
				surrender_progress > 0.1
			}
		}

		set_temp_variable = { supply_line_start = SOV.capital }
		set_temp_variable = { supply_line_target = GER.capital }
		EAI_build_supply_line = yes
	}
}

EAI_build_supply_line_JAP_RAJ = {

	if = {
		limit = {
			tag = JAP
			has_war_with = RAJ
		}

		613 = { set_temp_variable = { supply_line_start = THIS.id } }
		439 = { set_temp_variable = { supply_line_target = THIS.id } }
		EAI_build_supply_line = yes
	}
}

EAI_convert_MIC_to_CIC_industrial_expansion = {

	if = {
		limit = {
			tag = SOV
			has_idea = war_economy
			num_of_military_factories > 30
			date < 1937.1.1
			has_war = no
			num_of_civilian_factories_available_for_projects > 14
		}

		set_temp_variable = { EAI_PC_ignore_factory_limit = 1 }
		EAI_priority_convert_MIC_to_CIC = yes
	}
}

###

EAI_build_supply_line = {

	set_temp_variable = { pathfind_start = supply_line_start }
	set_temp_variable = { pathfind_target = supply_line_target }
	set_temp_variable = { pathfind_type = 1 }
	EAI_PATHFIND/get_path = yes

	if = { limit = { check_variable = { pathfind_success = 1 } }

		set_variable = { ROOT.EAI_PC_project_building_type^-1 = 1 }

		### build a route to the front

		set_temp_variable = { target_id = pathfind_path^0 }
		for_each_loop = { array = pathfind_path

			var:v = {

				if = { limit = { EAI_PC_can_build_project = yes }

					var:target_id = {

						if = { limit = { check_variable = { PREV.building_level@infrastructure < THIS.building_level@infrastructure } }

							set_temp_variable = { target_id = pathfind_path^i }
						}
					}

					set_temp_variable = { building_path_to_front = 1 }
				}
			}
		}

		if = { limit = { check_variable = { building_path_to_front = 1 } }

			var:target_id = { EAI_PC_start_project = yes }
		}

		### build along the front

		if = { limit = { check_variable = { building_path_to_front = 0 } }

			var:supply_line_target = {

				CONTROLLER = {

					set_temp_variable = { supply_line_target_controller = THIS.id }
				}
			}

			set_temp_variable = { front_intersection = pathfind_path^num }
			subtract_from_temp_variable = { front_intersection = 1 }
			set_temp_variable = { front_intersection = pathfind_path^front_intersection }

			add_to_temp_array = { front_states = front_intersection }
			add_to_temp_array = { explore_states = front_intersection }

			while_loop_effect = { limit = { check_variable = { explore_states^num > 0 } }

				clear_temp_array = neighbor_states

				for_each_scope_loop = { array = explore_states

					# max infrastructure
					if = { limit = { EAI_PC_can_build_project = yes }

						EAI_PC_start_project = yes

						set_temp_variable = { break = 1 }
					}

					# check neighbors
					else = {
						every_neighbor_state = {
							limit = {
								is_controlled_by = ROOT

								NOT = { is_in_array = { front_states = THIS.id } }

								any_neighbor_state = {

									CONTROLLER = {

										NOT = { tag = ROOT }

										OR = {
											tag = var:supply_line_target_controller
										}
									}
								}
							}

							add_to_temp_array = { front_states = THIS.id }
							add_to_temp_array = { neighbor_states = THIS.id }
						}
					}
				}

				clear_temp_array = explore_states
				for_each_loop = { array = neighbor_states break = break_2

					add_to_temp_array = { explore_states = v }
				}
			}
		}
	}
}

######################################################
# 	construction AI
######################################################

EAI_clear_construction_scores = {

	set_temp_variable = { EAI_has_shared_slot_scores = 0 }
	clear_temp_array = EAI_shared_slot_scores

	set_temp_variable = { EAI_has_infrastructure_slot_scores = 0 }
	clear_temp_array = EAI_infrastructure_slot_scores

	set_temp_variable = { EAI_has_resource_slot_scores = 0 }
	clear_temp_array = EAI_resource_slot_scores

	set_temp_variable = { EAI_has_radar_slot_scores = 0 }
	clear_temp_array = EAI_radar_slot_scores

	set_temp_variable = { EAI_has_airbase_slot_scores = 0 }
	clear_temp_array = EAI_airbase_slot_scores

	set_temp_variable = { EAI_has_antiair_slot_scores = 0 }
	clear_temp_array = EAI_antiair_slot_scores

	set_temp_variable = { EAI_has_mil_to_civ_conversion_slot_scores = 0 }
	clear_temp_array = EAI_mil_to_civ_conversion_slot_scores

	set_temp_variable = { EAI_has_civ_to_mil_conversion_slot_scores = 0 }
	clear_temp_array = EAI_civ_to_mil_conversion_slot_scores
}

# shared slots
EAI_get_shared_slot_scores = {

	set_temp_variable = { EAI_has_shared_slot_scores = 1 }

	for_each_scope_loop = { array = controlled_states

		if = { limit = { EAI_available_SHARED = yes }

			EAI_get_shared_slot_score = yes

			for_each_loop = { array = EAI_shared_slot_scores

				var:v = {
					if = { limit = { check_variable = { PREV.EAI_shared_slot_score > EAI_shared_slot_score } }

						add_to_temp_array = { array = EAI_shared_slot_scores index = i value = PREV.id }
						set_temp_variable = { break = 1 }
					}
				}
			}

			if = { limit = { check_variable = { break = 0 } }

				add_to_temp_array = { array = EAI_shared_slot_scores value = THIS.id }
			}
			else = { set_temp_variable = { break = 0 } }
		}
	}

	if = { limit = { has_country_flag = EAI_construction_logging }

		log = "======= PRINTING EAI_shared_slot_scores ======="
		for_each_scope_loop = { array = EAI_shared_slot_scores
			log = "[?EAI_shared_slot_score] - [This.GetName]"
		}
		log = "==============================================="
	}
}
EAI_get_shared_slot_score = {

	set_variable = { EAI_shared_slot_score = building_level@infrastructure }

	if = { limit = { EAI_no_border = yes } multiply_variable = { EAI_shared_slot_score = 1.1 } }

	if = { limit = { EAI_no_enemy_border = yes } multiply_variable = { EAI_shared_slot_score = 2 } }

	if = { limit = { EAI_region_priority = yes } multiply_variable = { EAI_shared_slot_score = 4 } }

	if = { limit = { is_core_of = ROOT } multiply_variable = { EAI_shared_slot_score = 4 } }
}

# infrastructure score for construction
EAI_get_infrastructure_slot_scores = {

	set_temp_variable = { EAI_has_infrastructure_slot_scores = 1 }

	for_each_scope_loop = { array = controlled_states

		if = { limit = { EAI_available_INF = yes }

			EAI_get_infrastructure_slot_score = yes

			for_each_loop = { array = EAI_infrastructure_slot_scores

				var:v = {
					if = { limit = { check_variable = { PREV.EAI_infrastructure_slot_score > EAI_infrastructure_slot_score } }

						add_to_temp_array = { array = EAI_infrastructure_slot_scores index = i value = PREV.id }
						set_temp_variable = { break = 1 }
					}
				}
			}

			if = { limit = { check_variable = { break = 0 } }

				add_to_temp_array = { array = EAI_infrastructure_slot_scores value = THIS.id }
			}
			else = { set_temp_variable = { break = 0 } }
		}
	}

	if = { limit = { has_country_flag = EAI_construction_logging }

		log = "======= PRINTING EAI_infrastructure_slot_scores ======="
		for_each_scope_loop = { array = EAI_infrastructure_slot_scores
			log = "[?EAI_infrastructure_slot_score] - [This.GetName]"
		}
		log = "==============================================="
	}
}
EAI_get_infrastructure_slot_score = {

	set_variable = { EAI_infrastructure_slot_score = 11 }
	set_temp_variable = { t1 = building_level@infrastructure }
	multiply_temp_variable = { t1 = 1.5 }
	subtract_from_variable = { EAI_infrastructure_slot_score = t1 }
	clamp_variable = { var = EAI_infrastructure_slot_score min = 1 max = 10 }

	if = { limit = { EAI_no_border = yes } multiply_variable = { EAI_infrastructure_slot_score = 1.1 } }

	if = { limit = { EAI_no_enemy_border = yes } multiply_variable = { EAI_infrastructure_slot_score = 2 } }

	if = { limit = { EAI_region_priority = yes } multiply_variable = { EAI_infrastructure_slot_score = 4 } }

	if = { limit = { is_core_of = ROOT } multiply_variable = { EAI_infrastructure_slot_score = 4 } }
}

# infrastructure score for resource extraction
EAI_get_resource_slot_scores = {

	set_temp_variable = { EAI_has_resource_slot_scores = 1 }

	for_each_scope_loop = { array = controlled_states

		if = { limit = { EAI_available_INF = yes check_variable = { EAI_total_resources > 25 } }

			EAI_get_resource_slot_score = yes

			for_each_loop = { array = EAI_resource_slot_scores

				var:v = {
					if = { limit = { check_variable = { PREV.EAI_resource_slot_score > EAI_resource_slot_score } }

						add_to_temp_array = { array = EAI_resource_slot_scores index = i value = PREV.id }
						set_temp_variable = { break = 1 }
					}
				}
			}

			if = { limit = { check_variable = { break = 0 } }

				add_to_temp_array = { array = EAI_resource_slot_scores value = THIS.id }
			}
			else = { set_temp_variable = { break = 0 } }
		}
	}

	if = { limit = { has_country_flag = EAI_construction_logging }

		log = "======= PRINTING EAI_resource_slot_scores ======="
		for_each_scope_loop = { array = EAI_resource_slot_scores
			log = "[?EAI_resource_slot_score] - [This.GetName]"
		}
		log = "==============================================="
	}
}
EAI_get_resource_slot_score = {

	set_temp_variable = { t3 = 0 }

	set_temp_variable = { t2 = resource@oil }
	if = { limit = { ROOT = { has_war = yes fuel_ratio < 0.5 } } multiply_temp_variable = { t2 = 4 } }
	add_to_temp_variable = { t3 = t2 }

	set_temp_variable = { t2 = resource@aluminium }
	if = { limit = { check_variable = { ROOT.EAI_needs_aluminium = 3 } } multiply_temp_variable = { t2 = 4 } }
	add_to_temp_variable = { t3 = t2 }

	set_temp_variable = { t2 = resource@rubber }
	if = { limit = { check_variable = { ROOT.EAI_needs_rubber = 3 } } multiply_temp_variable = { t2 = 4 } }
	add_to_temp_variable = { t3 = t2 }

	set_temp_variable = { t2 = resource@tungsten }
	if = { limit = { check_variable = { ROOT.EAI_needs_tungsten = 3 } } multiply_temp_variable = { t2 = 4 } }
	add_to_temp_variable = { t3 = t2 }

	set_temp_variable = { t2 = resource@steel }
	if = { limit = { check_variable = { ROOT.EAI_needs_steel = 3 } } multiply_temp_variable = { t2 = 4 } }
	add_to_temp_variable = { t3 = t2 }

	set_temp_variable = { t2 = resource@chromium }
	if = { limit = { check_variable = { ROOT.EAI_needs_chromium = 3 } } multiply_temp_variable = { t2 = 4 } }
	add_to_temp_variable = { t3 = t2 }

	set_temp_variable = { t2 = resource@coal }
	if = { limit = { check_variable = { ROOT.EAI_needs_coal = 3 } } multiply_temp_variable = { t2 = 4 } }
	add_to_temp_variable = { t3 = t2 }

	set_temp_variable = { t2 = resource@bauxite }
	if = { limit = { check_variable = { ROOT.EAI_needs_bauxite = 3 } } multiply_temp_variable = { t2 = 4 } }
	add_to_temp_variable = { t3 = t2 }

	set_temp_variable = { t2 = resource@iron }
	if = { limit = { check_variable = { ROOT.EAI_needs_iron = 3 } } multiply_temp_variable = { t2 = 4 } }

	add_to_temp_variable = { t3 = t2 }
	set_variable = { EAI_resource_slot_score = t3 }

	if = { limit = { EAI_no_border = yes } multiply_variable = { EAI_resource_slot_score = 1.1 } }

	if = { limit = { EAI_no_enemy_border = yes } multiply_variable = { EAI_resource_slot_score = 1.2 } }

	if = { limit = { EAI_region_priority = yes } multiply_variable = { EAI_resource_slot_score = 1.2 } }
}
EAI_set_resource_variables = {

	set_variable = { EAI_total_resources = resource@oil }
	add_to_variable = { EAI_total_resources = resource@aluminium }
	add_to_variable = { EAI_total_resources = resource@rubber }
	add_to_variable = { EAI_total_resources = resource@tungsten }
	add_to_variable = { EAI_total_resources = resource@steel }
	add_to_variable = { EAI_total_resources = resource@chromium }
	add_to_variable = { EAI_total_resources = resource@coal }
	add_to_variable = { EAI_total_resources = resource@bauxite }
	add_to_variable = { EAI_total_resources = resource@iron }
}

# radar
EAI_get_radar_slot_scores = {

	set_temp_variable = { EAI_has_radar_slot_scores = 1 }

	for_each_scope_loop = { array = controlled_states

		if = { limit = { EAI_available_RADAR = yes }

			EAI_get_radar_slot_score = yes

			for_each_loop = { array = EAI_radar_slot_scores

				var:v = {
					if = { limit = { check_variable = { PREV.EAI_radar_slot_score > EAI_radar_slot_score } }

						add_to_temp_array = { array = EAI_radar_slot_scores index = i value = PREV.id }
						set_temp_variable = { break = 1 }
					}
				}
			}

			if = { limit = { check_variable = { break = 0 } }

				add_to_temp_array = { array = EAI_radar_slot_scores value = THIS.id }
			}
			else = { set_temp_variable = { break = 0 } }
		}
	}

	if = { limit = { has_country_flag = EAI_construction_logging }

		log = "======= PRINTING EAI_radar_slot_scores ======="
		for_each_scope_loop = { array = EAI_radar_slot_scores
			log = "[?EAI_radar_slot_score] - [This.GetName]"
		}
		log = "==============================================="
	}
}
EAI_get_radar_slot_score = {

	set_variable = { EAI_radar_slot_score = 6 }
	subtract_from_variable = { EAI_radar_slot_score = building_level@radar }

	if = { limit = { EAI_radar_location_2 = yes } multiply_variable = { EAI_radar_slot_score = 10 } }

	if = { limit = { radar_station > 1 has_state_flag = EAI_radar_site } multiply_variable = { EAI_radar_slot_score = 2 } }

	if = {
		limit = {
			NOT = {
				any_neighbor_state = {
					OR = {
						AND = {
							OR = { has_state_flag = EAI_radar_site radar_station > 0 }
							check_variable = { PREV.distance_to@THIS < 400 }
						}
						any_neighbor_state = {
							NOT = { check_variable = { THIS.id = PREV.PREV.id } }
							OR = { has_state_flag = EAI_radar_site radar_station > 0 }
							check_variable = { PREV.PREV.distance_to@THIS < 400 }
						}
					}
				}
			}
		}

		multiply_variable = { EAI_radar_slot_score = 2 }
	}
}

# airbase
EAI_get_airbase_slot_scores = {

	set_temp_variable = { EAI_has_airbase_slot_scores = 1 }

	for_each_scope_loop = { array = controlled_states

		if = { limit = { EAI_available_AIR = yes }

			EAI_get_airbase_slot_score = yes

			for_each_loop = { array = EAI_airbase_slot_scores

				var:v = {
					if = { limit = { check_variable = { PREV.EAI_airbase_slot_score > EAI_airbase_slot_score } }

						add_to_temp_array = { array = EAI_airbase_slot_scores index = i value = PREV.id }
						set_temp_variable = { break = 1 }
					}
				}
			}

			if = { limit = { check_variable = { break = 0 } }

				add_to_temp_array = { array = EAI_airbase_slot_scores value = THIS.id }
			}
			else = { set_temp_variable = { break = 0 } }
		}
	}

	if = { limit = { has_country_flag = EAI_construction_logging }

		log = "======= PRINTING EAI_airbase_slot_scores ======="
		for_each_scope_loop = { array = EAI_airbase_slot_scores
			log = "[?EAI_airbase_slot_score] - [This.GetName]"
		}
		log = "==============================================="
	}
}
EAI_get_airbase_slot_score = {

	set_variable = { EAI_airbase_slot_score = 10 }
	subtract_from_variable = { EAI_airbase_slot_score = building_level@air_base }

	if = { limit = { EAI_airbase_priority = yes } multiply_variable = { EAI_airbase_slot_score = 4 } }

	if = {
		limit = {
			any_neighbor_state = {
				CONTROLLER = {
					has_war_with = ROOT
				}
			}
		}
		multiply_variable = {
			EAI_airbase_slot_score = 1.5
		}
	}

	if = { limit = { air_base > 0 } multiply_variable = { EAI_airbase_slot_score = 1.25 } }

	if = {
		limit = {
			any_of_scopes = { array = ROOT.enemies
				any_of_scopes = { array = controlled_states
					check_variable = { PREV.PREV.distance_to@THIS < 400 }
				}
			}
		}

		multiply_variable = { EAI_airbase_slot_score = 2 }
	}
}

# antiair
EAI_get_antiair_slot_scores = {

	set_temp_variable = { EAI_has_antiair_slot_scores = 1 }

	for_each_scope_loop = { array = controlled_states

		if = { limit = { EAI_available_AA = yes }

			EAI_get_antiair_slot_score = yes

			for_each_loop = { array = EAI_antiair_slot_scores

				var:v = {
					if = { limit = { check_variable = { PREV.EAI_antiair_slot_score > EAI_antiair_slot_score } }

						add_to_temp_array = { array = EAI_antiair_slot_scores index = i value = PREV.id }
						set_temp_variable = { break = 1 }
					}
				}
			}

			if = { limit = { check_variable = { break = 0 } }

				add_to_temp_array = { array = EAI_antiair_slot_scores value = THIS.id }
			}
			else = { set_temp_variable = { break = 0 } }
		}
	}

	if = { limit = { has_country_flag = EAI_construction_logging }

		log = "======= PRINTING EAI_antiair_slot_scores ======="
		for_each_scope_loop = { array = EAI_antiair_slot_scores
			log = "[?EAI_antiair_slot_score] - [This.GetName]"
		}
		log = "==============================================="
	}
}
EAI_get_antiair_slot_score = {

	set_variable = { EAI_antiair_slot_score = 5 }
	subtract_from_variable = { EAI_antiair_slot_score = building_level@anti_air_building }

	# refineries
	set_temp_variable = { t1 = building_level@synthetic_refinery }
	divide_temp_variable = { t1 = 1.5 }
	add_to_temp_variable = { t1 = 1 }
	multiply_variable = { EAI_antiair_slot_score = t1 }

	# steel mils
	set_temp_variable = { t1 = building_level@hydro_steel_refinery }
	divide_temp_variable = { t1 = 1.5 }
	add_to_temp_variable = { t1 = 1 }
	multiply_variable = { EAI_antiair_slot_score = t1 }

	# aluminium smelter
	set_temp_variable = { t1 = building_level@aluminium_refinery }
	divide_temp_variable = { t1 = 1.5 }
	add_to_temp_variable = { t1 = 1 }
	multiply_variable = { EAI_antiair_slot_score = t1 }

	set_temp_variable = { t1 = building_level@hydro_aluminium_refinery }
	divide_temp_variable = { t1 = 1.5 }
	add_to_temp_variable = { t1 = 1 }
	multiply_variable = { EAI_antiair_slot_score = t1 }

	# steel mils
	set_temp_variable = { t1 = building_level@steel_refinery }
	divide_temp_variable = { t1 = 1.5 }
	add_to_temp_variable = { t1 = 1 }
	multiply_variable = { EAI_antiair_slot_score = t1 }

	set_temp_variable = { t1 = building_level@hydro_steel_refinery }
	divide_temp_variable = { t1 = 1.5 }
	add_to_temp_variable = { t1 = 1 }
	multiply_variable = { EAI_antiair_slot_score = t1 }

	# aluminium smelter
	set_temp_variable = { t1 = building_level@hydro_aluminium_refinery }
	divide_temp_variable = { t1 = 1.5 }
	add_to_temp_variable = { t1 = 1 }
	multiply_variable = { EAI_antiair_slot_score = t1 }

	# mic
	set_temp_variable = { t1 = building_level@industrial_complex }
	divide_temp_variable = { t1 = 10 }
	add_to_temp_variable = { t1 = 1 }
	multiply_variable = { EAI_antiair_slot_score = t1 }

	# cic
	set_temp_variable = { t1 = building_level@arms_factory }
	divide_temp_variable = { t1 = 10 }
	add_to_temp_variable = { t1 = 1 }
	multiply_variable = { EAI_antiair_slot_score = t1 }

	if = { limit = { EAI_no_border = yes } multiply_variable = { EAI_antiair_slot_score = 1.1 } }

	if = { limit = { EAI_no_enemy_border = yes } multiply_variable = { EAI_antiair_slot_score = 2 } }

	if = { limit = { is_core_of = ROOT } multiply_variable = { EAI_antiair_slot_score = 4 } }
}

# mil to civ conversion
EAI_get_mil_to_civ_conversion_slot_scores = {

	set_temp_variable = { EAI_has_mil_to_civ_conversion_slot_scores = 1 }

	for_each_scope_loop = { array = controlled_states

		if = { limit = { check_variable = { building_level@arms_factory > 0 } }

			EAI_get_mil_to_civ_conversion_slot_score = yes

			for_each_loop = { array = EAI_mil_to_civ_conversion_slot_scores

				var:v = {
					if = { limit = { check_variable = { PREV.EAI_mil_to_civ_conversion_slot_score > EAI_mil_to_civ_conversion_slot_score } }

						add_to_temp_array = { array = EAI_mil_to_civ_conversion_slot_scores index = i value = PREV.id }
						set_temp_variable = { break = 1 }
					}
				}
			}

			if = { limit = { check_variable = { break = 0 } }

				add_to_temp_array = { array = EAI_mil_to_civ_conversion_slot_scores value = THIS.id }
			}
			else = { set_temp_variable = { break = 0 } }
		}
	}

	if = { limit = { has_country_flag = EAI_construction_logging }

		log = "======= PRINTING EAI_mil_to_civ_conversion_slot_scores ======="
		for_each_scope_loop = { array = EAI_mil_to_civ_conversion_slot_scores
			log = "[?EAI_mil_to_civ_conversion_slot_score] - [This.GetName]"
		}
		log = "==============================================="
	}
}
EAI_get_mil_to_civ_conversion_slot_score = {

	set_variable = { EAI_mil_to_civ_conversion_slot_score = building_level@infrastructure }

	if = { limit = { EAI_no_border = yes } multiply_variable = { EAI_mil_to_civ_conversion_slot_score = 1.1 } }

	if = { limit = { EAI_no_enemy_border = yes } multiply_variable = { EAI_mil_to_civ_conversion_slot_score = 2 } }

	if = { limit = { EAI_region_priority = yes } multiply_variable = { EAI_mil_to_civ_conversion_slot_score = 4 } }

	if = { limit = { is_core_of = ROOT } multiply_variable = { EAI_mil_to_civ_conversion_slot_score = 4 } }
}

######################################################

### functions for AI construction

# civilian factories
EAI_queue_CIC = {

	if = { limit = { check_variable = { EAI_has_shared_slot_scores = 0 } }

		EAI_get_shared_slot_scores = yes
	}

	for_each_scope_loop = { array = EAI_shared_slot_scores

		if = {
			limit = {
				EAI_available_SHARED = yes
				infrastructure > 3
			}

			EAI_add_CIC = yes
			set_temp_variable = { break = 1 }
		}
	}

	if = { limit = { check_variable = { break = 0 } }

		EAI_queue_INF = yes
	}
}
EAI_queue_CIC_2 = {

	if = { limit = { check_variable = { EAI_has_shared_slot_scores = 0 } }

		EAI_get_shared_slot_scores = yes
	}

	for_each_scope_loop = { array = EAI_shared_slot_scores

		if = {
			limit = {
				EAI_available_SHARED = yes
			}

			EAI_add_CIC = yes
			set_temp_variable = { break = 1 }
		}
	}
}

# military factories
EAI_queue_MIC = {

	if = { limit = { check_variable = { EAI_has_shared_slot_scores = 0 } }

		EAI_get_shared_slot_scores = yes
	}

	for_each_scope_loop = { array = EAI_shared_slot_scores

		if = {
			limit = {
				EAI_available_SHARED = yes
				infrastructure > 3
			}

			EAI_add_MIC = yes
			set_temp_variable = { break = 1 }
		}
	}

	if = { limit = { check_variable = { break = 0 } }

		EAI_queue_INF = yes
	}
}
EAI_queue_MIC_2 = {

	if = { limit = { check_variable = { EAI_has_shared_slot_scores = 0 } }

		EAI_get_shared_slot_scores = yes
	}

	for_each_scope_loop = { array = EAI_shared_slot_scores

		if = {
			limit = {
				EAI_available_SHARED = yes
			}

			EAI_add_MIC = yes
			set_temp_variable = { break = 1 }
		}
	}
}

# dockayrds
EAI_queue_NIC = {

	if = { limit = { check_variable = { EAI_has_shared_slot_scores = 0 } }

		EAI_get_shared_slot_scores = yes
	}

	for_each_scope_loop = { array = EAI_shared_slot_scores

		if = {
			limit = {
				is_coastal = yes
				EAI_available_SHARED = yes
			}

			EAI_add_NIC = yes
			set_temp_variable = { break = 1 }
		}
	}

	if = { limit = { check_variable = { break = 0 } }

		EAI_queue_MIC = yes
	}
}

# refineries
EAI_queue_REF = {

	if = { limit = { check_variable = { EAI_has_shared_slot_scores = 0 } }

		EAI_get_shared_slot_scores = yes
	}

	for_each_scope_loop = { array = EAI_shared_slot_scores

		if = {
			limit = {
				is_core_of = ROOT
				EAI_available_REF = yes
				EAI_available_SHARED = yes
			}

			EAI_add_REF = yes
			set_temp_variable = { break = 1 }
		}
	}

	if = { # replace MIC if slots are maxed out
		limit = {
			check_variable = { break = 0 }
			has_tech = expanded_industry6
		}

		for_each_scope_loop = { array = EAI_shared_slot_scores

			if = {
				limit = {
					is_core_of = ROOT
					arms_factory > 0
					synthetic_refinery < 3
					NOT = { has_state_flag = EAI_mic_replaced_with_ref }
					ROOT = { has_full_control_of_state = PREV }
				}

				remove_building = { type = arms_factory level = 1 }
				if = { limit = { EAI_available_REF = yes }
					set_state_flag = { flag = EAI_mic_replaced_with_ref value = 1 days = 180 }
					EAI_add_REF = yes
					set_temp_variable = { break = 1 }

					if = { limit = { ROOT = { has_country_flag = EAI_logging } } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | CONSTRUCTION: replacing MIC with REF in [This.GetName]" }
				}
				else = { add_building_construction = { type = arms_factory level = 1 instant_build = yes } }
			}
		}
	}
}

# silos
EAI_queue_SILO = {

	if = { limit = { has_tech = fuel_silos }

		if = { limit = { check_variable = { EAI_has_shared_slot_scores = 0 } }

			EAI_get_shared_slot_scores = yes
		}

		for_each_scope_loop = { array = EAI_shared_slot_scores

			if = {
				limit = {
					is_core_of = ROOT
					EAI_available_SILO = yes
					EAI_available_SHARED = yes
				}

				EAI_add_SILO = yes
				set_temp_variable = { break = 1 }
			}
		}
	}
}

# infrastructure
EAI_queue_INF = {

	if = { limit = { check_variable = { EAI_has_infrastructure_slot_scores = 0 } }

		EAI_get_infrastructure_slot_scores = yes
	}

	for_each_scope_loop = { array = EAI_infrastructure_slot_scores

		if = {
			limit = {
				EAI_available_INF = yes
				NOT = { has_state_flag = EAI_inf_queued }
			}

			EAI_add_INF = yes
			set_temp_variable = { break = 1 }
			set_state_flag = { flag = EAI_inf_queued value = 1 days = 1 }
		}
	}
}

# infrastructure for resources
EAI_queue_INF_resource = {

	if = { limit = { check_variable = { EAI_has_resource_slot_scores = 0 } }

		EAI_get_resource_slot_scores = yes
	}

	if = { limit = { check_variable = { ROOT.EAI_PC_active_projects < 5 } EAI_PC_can_afford_project = yes }

		EAI_priority_queue_INF_resource = yes
	}
	else = {

		for_each_scope_loop = { array = EAI_resource_slot_scores

			if = {
				limit = {
					EAI_available_INF = yes
				}

				EAI_add_INF = yes
				set_temp_variable = { break = 1 }
			}
		}
	}
}
EAI_priority_queue_INF_resource = {

	if = { limit = { check_variable = { ROOT.EAI_PC_active_projects < 5 } }

		if = { limit = { check_variable = { EAI_has_resource_slot_scores = 0 } }

			EAI_get_resource_slot_scores = yes
		}

		set_variable = { ROOT.EAI_PC_project_building_type^-1 = 1 }

		for_each_scope_loop = { array = EAI_resource_slot_scores

			if = { limit = { EAI_PC_can_build_project = yes }

				EAI_PC_start_project = yes
				set_temp_variable = { break = 1 }
			}
		}
	}
}

#WA refineries

EAI_queue_HSR = {

	if = { limit = { check_variable = { EAI_has_shared_slot_scores = 0 } }

		EAI_get_shared_slot_scores = yes
	}

	for_each_scope_loop = { array = EAI_shared_slot_scores

		if = {
			limit = {
				is_core_of = ROOT
				EAI_available_HSR = yes
				EAI_available_SHARED = yes
			}

			EAI_add_HSR = yes
			set_temp_variable = { break = 1 }
		}
	}

	if = { # replace MIC if slots are maxed out
		limit = {
			check_variable = { break = 0 }
			has_tech = expanded_industry6
		}

		for_each_scope_loop = { array = EAI_shared_slot_scores

			if = {
				limit = {
					is_core_of = ROOT
					arms_factory > 0
					hydro_steel_refinery < 3
					NOT = { has_state_flag = EAI_mic_replaced_with_hsr }
					ROOT = { has_full_control_of_state = PREV }
				}

				remove_building = { type = arms_factory level = 1 }
				if = { limit = { EAI_available_HSR = yes }
					set_state_flag = { flag = EAI_mic_replaced_with_hsr value = 1 days = 180 }
					EAI_add_HSR = yes
					set_temp_variable = { break = 1 }

					if = { limit = { ROOT = { has_country_flag = EAI_logging } } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | CONSTRUCTION: replacing MIC with HSR in [This.GetName]" }
				}
				else = { add_building_construction = { type = arms_factory level = 1 instant_build = yes } }
			}
		}
	}
}

EAI_queue_SR = {

	if = { limit = { check_variable = { EAI_has_shared_slot_scores = 0 } }

		EAI_get_shared_slot_scores = yes
	}

	for_each_scope_loop = { array = EAI_shared_slot_scores

		if = {
			limit = {
				is_core_of = ROOT
				EAI_available_SR = yes
				EAI_available_SHARED = yes
			}

			EAI_add_SR = yes
			set_temp_variable = { break = 1 }
		}
	}

	if = { # replace MIC if slots are maxed out
		limit = {
			check_variable = { break = 0 }
			has_tech = expanded_industry6
		}

		for_each_scope_loop = { array = EAI_shared_slot_scores

			if = {
				limit = {
					is_core_of = ROOT
					arms_factory > 0
					hydro_steel_refinery < 3
					NOT = { has_state_flag = EAI_mic_replaced_with_SR }
					ROOT = { has_full_control_of_state = PREV }
				}

				remove_building = { type = arms_factory level = 1 }
				if = { limit = { EAI_available_SR = yes }
					set_state_flag = { flag = EAI_mic_replaced_with_SR value = 1 days = 180 }
					EAI_add_SR = yes
					set_temp_variable = { break = 1 }

					if = { limit = { ROOT = { has_country_flag = EAI_logging } } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | CONSTRUCTION: replacing MIC with SR in [This.GetName]" }
				}
				else = { add_building_construction = { type = arms_factory level = 1 instant_build = yes } }
			}
		}
	}
}

EAI_queue_HAR = {

	if = { limit = { check_variable = { EAI_has_shared_slot_scores = 0 } }

		EAI_get_shared_slot_scores = yes
	}

	for_each_scope_loop = { array = EAI_shared_slot_scores

		if = {
			limit = {
				is_core_of = ROOT
				EAI_available_REF = yes
				EAI_available_SHARED = yes
			}

			EAI_add_HAR = yes
			set_temp_variable = { break = 1 }
		}
	}

	if = { # replace MIC if slots are maxed out
		limit = {
			check_variable = { break = 0 }
			has_tech = expanded_industry6
		}

		for_each_scope_loop = { array = EAI_shared_slot_scores

			if = {
				limit = {
					is_core_of = ROOT
					arms_factory > 0
					hydro_steel_refinery < 3
					NOT = { has_state_flag = EAI_mic_replaced_with_har }
					ROOT = { has_full_control_of_state = PREV }
				}

				remove_building = { type = arms_factory level = 1 }
				if = { limit = { EAI_available_HAR = yes }
					set_state_flag = { flag = EAI_mic_replaced_with_HAR value = 1 days = 180 }
					EAI_add_HAR = yes
					set_temp_variable = { break = 1 }

					if = { limit = { ROOT = { has_country_flag = EAI_logging } } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | CONSTRUCTION: replacing MIC with HAR in [This.GetName]" }
				}
				else = { add_building_construction = { type = arms_factory level = 1 instant_build = yes } }
			}
		}
	}
}

EAI_queue_AR = {

	if = { limit = { check_variable = { EAI_has_shared_slot_scores = 0 } }

		EAI_get_shared_slot_scores = yes
	}

	for_each_scope_loop = { array = EAI_shared_slot_scores

		if = {
			limit = {
				is_core_of = ROOT
				EAI_available_AR = yes
				EAI_available_SHARED = yes
			}

			EAI_add_AR = yes
			set_temp_variable = { break = 1 }
		}
	}

	if = { # replace MIC if slots are maxed out
		limit = {
			check_variable = { break = 0 }
			has_tech = expanded_industry6
		}

		for_each_scope_loop = { array = EAI_shared_slot_scores

			if = {
				limit = {
					is_core_of = ROOT
					arms_factory > 0
					hydro_steel_refinery < 3
					NOT = { has_state_flag = EAI_mic_replaced_with_AR }
					ROOT = { has_full_control_of_state = PREV }
				}

				remove_building = { type = arms_factory level = 1 }
				if = { limit = { EAI_available_AR = yes }
					set_state_flag = { flag = EAI_mic_replaced_with_AR value = 1 days = 180 }
					EAI_add_AR = yes
					set_temp_variable = { break = 1 }

					if = { limit = { ROOT = { has_country_flag = EAI_logging } } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | CONSTRUCTION: replacing MIC with AR in [This.GetName]" }
				}
				else = { add_building_construction = { type = arms_factory level = 1 instant_build = yes } }
			}
		}
	}
}

# radar
EAI_queue_RADAR = {

	if = { limit = { has_tech = radio_detection }

		if = { limit = { check_variable = { EAI_has_radar_slot_scores = 0 } }

			EAI_get_radar_slot_scores = yes
		}

		for_each_scope_loop = { array = EAI_radar_slot_scores

			if = {
				limit = {
					EAI_available_RADAR = yes
					NOT = { has_state_flag = EAI_radar_queued }
				}

				EAI_add_RADAR = yes
				set_temp_variable = { break = 1 }
				set_state_flag = { flag = EAI_radar_queued value = 1 days = 1 }
			}
		}
	}
}

# airbase
EAI_queue_AIR = {

	if = { limit = { check_variable = { EAI_has_airbase_slot_scores = 0 } }

		EAI_get_airbase_slot_scores = yes
	}

	for_each_scope_loop = { array = EAI_airbase_slot_scores

		if = {
			limit = {
				EAI_available_AIR = yes
			}

			EAI_add_AIR = yes
			set_temp_variable = { break = 1 }
		}
	}
}

# antiair
EAI_queue_AA = {

	if = { limit = { check_variable = { EAI_has_antiair_slot_scores = 0 } }

		EAI_get_antiair_slot_scores = yes
	}

	for_each_scope_loop = { array = EAI_antiair_slot_scores

		if = {
			limit = {
				EAI_available_AA = yes
				NOT = { has_state_flag = EAI_aa_queued }
			}

			EAI_add_AA = yes
			set_temp_variable = { break = 1 }
			set_state_flag = { flag = EAI_aa_queued value = 1 days = 1 }
		}
	}
}

# mil to civ conversion
EAI_priority_convert_MIC_to_CIC = {

	if = { limit = { check_variable = { ROOT.EAI_PC_active_projects < 5 } }

		if = { limit = { check_variable = { EAI_has_mil_to_civ_conversion_slot_scores = 0 } }

			EAI_get_mil_to_civ_conversion_slot_scores = yes
		}

		set_variable = { ROOT.EAI_PC_project_building_type^-1 = 9 }

		for_each_scope_loop = { array = EAI_mil_to_civ_conversion_slot_scores

			if = { limit = { EAI_PC_can_build_project = yes }

				EAI_PC_start_project = yes
				set_temp_variable = { break = 1 }
			}
		}
	}
}

# # civ to mil conversion
# EAI_priority_convert_CIC_to_MIC = {

# 	if = { limit = { check_variable = { ROOT.EAI_PC_active_projects < 5 } }

# 		if = { limit = { check_variable = { EAI_has_civ_to_mil_conversion_slot_scores = 0 } }

# 			EAI_has_civ_to_mil_conversion_slot_scores = yes
# 		}

# 		set_variable = { ROOT.EAI_PC_project_building_type^-1 = 10 }

# 		for_each_scope_loop = { array = EAI_mil_to_civ_conversion_slot_scores

# 			if = { limit = { EAI_PC_can_build_project = yes }

# 				EAI_PC_start_project = yes
# 				set_temp_variable = { break = 1 }
# 			}
# 		}
# 	}
# }

EAI_priority_queue_synthetic_refinery = {

		if = { limit = { check_variable = { ROOT.EAI_PC_active_projects < 5 } }

		# if = { limit = { check_variable = { EAI_has_mil_to_civ_conversion_slot_scores = 0 } }

		# 	EAI_get_mil_to_civ_conversion_slot_scores = yes
		# }

		set_variable = { ROOT.EAI_PC_project_building_type^-1 = 8 }

		random_scope_in_array = { array = controlled_states

			if = { limit = { EAI_PC_can_build_project = yes EAI_region_priority = yes}

				EAI_PC_start_project = yes
				set_temp_variable = { break = 1 }
			}
		}
	}
}

EAI_priority_queue_hydro_steel_refinery = {

		if = { limit = { check_variable = { ROOT.EAI_PC_active_projects < 5 } }

		# if = { limit = { check_variable = { EAI_has_mil_to_civ_conversion_slot_scores = 0 } }

		# 	EAI_get_mil_to_civ_conversion_slot_scores = yes
		# }

		set_variable = { ROOT.EAI_PC_project_building_type^-1 = 11 }

		random_scope_in_array = { array = controlled_states

			if = { limit = { EAI_PC_can_build_project = yes EAI_region_priority = yes}

				EAI_PC_start_project = yes
				set_temp_variable = { break = 1 }
			}
		}
	}
}

EAI_priority_queue_hydro_aluminium_refinery = {

	if = { limit = { check_variable = { ROOT.EAI_PC_active_projects < 5 } }

		# if = { limit = { check_variable = { EAI_has_mil_to_civ_conversion_slot_scores = 0 } }

		# 	EAI_get_mil_to_civ_conversion_slot_scores = yes
		# }

		set_variable = { ROOT.EAI_PC_project_building_type^-1 = 12 }

		random_scope_in_array = { array = controlled_states

			if = { limit = { EAI_PC_can_build_project = yes EAI_region_priority = yes}

				EAI_PC_start_project = yes
				set_temp_variable = { break = 1 }
			}
		}
	}
}


######################################################

# for building INF to increase supply
EAI_queue_INF_supply = {
	if = {
		limit = {
			any_of_scopes = { array = controlled_states
				EAI_available_INF = yes
				free_building_slots = { building = infrastructure size > 5 include_locked = no }
				ROOT = { divisions_in_state = { state = PREV size > 5 } }
				any_neighbor_state = { CONTROLLER = { has_war_with = ROOT strength_ratio = { tag = ROOT ratio > 0.5 } } }
			}
		}

		random_scope_in_array = { array = controlled_states
			limit = {
				EAI_available_INF = yes
				free_building_slots = { building = infrastructure size > 5 include_locked = no }
				ROOT = { divisions_in_state = { state = PREV size > 5 } }
				any_neighbor_state = { CONTROLLER = { has_war_with = ROOT strength_ratio = { tag = ROOT ratio > 0.5 } } }
			}
			EAI_add_INF = yes
		}
	}
	else_if = {
		limit = {
			any_of_scopes = { array = controlled_states
				EAI_available_INF = yes
				free_building_slots = { building = infrastructure size > 5 include_locked = no }
				ROOT = { divisions_in_state = { state = PREV size > 5 } }
				any_neighbor_state = { CONTROLLER = { has_war_with = ROOT } }
			}
		}
		random_scope_in_array = { array = controlled_states
			limit = {
				EAI_available_INF = yes
				free_building_slots = { building = infrastructure size > 5 include_locked = no }
				ROOT = { divisions_in_state = { state = PREV size > 5 } }
				any_neighbor_state = { CONTROLLER = { has_war_with = ROOT } }
			}
			EAI_add_INF = yes
		}
	}
}

# build forts on victory points in a state
EAI_queue_FORT_CITIES = {

	random_scope_in_array = { array = controlled_states
		limit = {
			is_in_home_area = yes
			EAI_has_city = yes
			check_variable = { EAI_forts_constructed_on_cities_@ROOT < 3 }
		}

		EAI_add_FORT_CITY = yes
	}
}

# build forts on every border province of a state
EAI_queue_FORT_BORDER = {

	random_scope_in_array = { array = controlled_states
		limit = {
			is_controlled_by = ROOT
			NOT = { EAI_no_border = yes }
			is_in_home_area = yes
			check_variable = { EAI_forts_constructed_on_border_@ROOT < 3 }
		}

		EAI_add_FORT_BORDER = yes
	}
}

# build coastal forts on naval bases in a state
EAI_queue_CFORT_BASES = {

	random_scope_in_array = { array = controlled_states
		limit = {
			is_controlled_by = ROOT
			is_coastal = yes
			is_in_home_area = yes
			EAI_has_naval_base = yes
			check_variable = { EAI_forts_constructed_on_bases_@ROOT < 3 }
		}

		EAI_add_CFORT_BASE = yes
	}
}

# build coastal forts on every coastal province in a state
EAI_queue_CFORT_COAST = {

	random_scope_in_array = { array = controlled_states
		limit = {
			is_controlled_by = ROOT
			is_coastal = yes
			is_in_home_area = yes
			check_variable = { EAI_forts_constructed_on_coast_@ROOT < 3 }
		}

		EAI_add_CFORT_COAST = yes
	}
}

######################################################

EAI_add_CIC = {
	if = { limit = { ROOT = { has_country_flag = EAI_construction_logging } } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | CONSTRUCTION: EAI_add_CIC in [?This.id] [This.GetName]" }
	add_building_construction = { type = industrial_complex level = 1 instant_build = no }
}

EAI_add_MIC = {
	if = { limit = { ROOT = { has_country_flag = EAI_construction_logging } } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | CONSTRUCTION: EAI_add_MIC in [?This.id] [This.GetName]" }
	add_building_construction = { type = arms_factory level = 1 instant_build = no }
}

EAI_add_NIC = {
	if = { limit = { ROOT = { has_country_flag = EAI_construction_logging } } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | CONSTRUCTION: EAI_add_NIC in [?This.id] [This.GetName]" }
	add_building_construction = { type = dockyard level = 1 instant_build = no }
}

EAI_add_REF = {
	if = { limit = { ROOT = { has_country_flag = EAI_construction_logging } } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | CONSTRUCTION: EAI_add_REF in [?This.id] [This.GetName]" }
	add_building_construction = { type = synthetic_refinery level = 1 instant_build = no }
}

EAI_add_HSR = {
	if = { limit = { ROOT = { has_country_flag = EAI_construction_logging } } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | CONSTRUCTION: EAI_add_HSR in [?This.id] [This.GetName]" }
	add_building_construction = { type = hydro_steel_refinery level = 1 instant_build = no }
}

EAI_add_SR = {
	if = { limit = { ROOT = { has_country_flag = EAI_construction_logging } } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | CONSTRUCTION: EAI_add_SR in [?This.id] [This.GetName]" }
	add_building_construction = { type = steel_refinery level = 1 instant_build = no }
}

EAI_add_HAR = {
	if = { limit = { ROOT = { has_country_flag = EAI_construction_logging } } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | CONSTRUCTION: EAI_add_HAR in [?This.id] [This.GetName]" }
	add_building_construction = { type = hydro_aluminium_refinery level = 1 instant_build = no }
}

EAI_add_AR = {
	if = { limit = { ROOT = { has_country_flag = EAI_construction_logging } } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | CONSTRUCTION: EAI_add_AR in [?This.id] [This.GetName]" }
	add_building_construction = { type = aluminium_refinery level = 1 instant_build = no }
}

EAI_add_INF = {
	if = { limit = { ROOT = { has_country_flag = EAI_construction_logging } } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | CONSTRUCTION: EAI_add_INF in [?This.id] [This.GetName]" }
	add_building_construction = { type = infrastructure level = 1 instant_build = no }
}

EAI_add_RADAR = {
	if = { limit = { ROOT = { has_country_flag = EAI_construction_logging } } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | CONSTRUCTION: EAI_add_RADAR in [?This.id] [This.GetName]" }
	add_building_construction = { type = radar_station level = 1 instant_build = no }
	set_state_flag = EAI_radar_site
}

EAI_add_AIR = {
	if = { limit = { ROOT = { has_country_flag = EAI_construction_logging } } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | CONSTRUCTION: EAI_add_AIR in [?This.id] [This.GetName]" }
	add_building_construction = { type = air_base level = 1 instant_build = no }
}

EAI_add_AA = {
	if = { limit = { ROOT = { has_country_flag = EAI_construction_logging } } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | CONSTRUCTION: EAI_add_AA in [?This.id] [This.GetName]" }
	add_building_construction = { type = anti_air_building level = 1 instant_build = no }
}

EAI_add_SILO = {
	if = { limit = { ROOT = { has_country_flag = EAI_construction_logging } } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | CONSTRUCTION: EAI_add_SILO in [?This.id] [This.GetName]" }
	add_building_construction = { type = fuel_silo level = 1 instant_build = no }
}

EAI_add_FORT_CITY = {
	if = { limit = { ROOT = { has_country_flag = EAI_construction_logging } } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | CONSTRUCTION: EAI_add_FORT_CITY in [?This.id] [This.GetName]" }
	add_building_construction = {
		type = bunker
		province = {
			all_provinces = yes
			limit_to_victory_point = yes
		}
		level = 1
		instant_build = no
	}

	add_to_variable = { EAI_forts_constructed_on_cities_@ROOT = 1 }
}

EAI_add_FORT_BORDER = {
	if = { limit = { ROOT = { has_country_flag = EAI_construction_logging } } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | CONSTRUCTION: EAI_add_FORT_BORDER in [?This.id] [This.GetName]" }
	add_building_construction = {
		type = bunker
		province = {
			all_provinces = yes
			limit_to_border = yes
		}
		level = 1
		instant_build = no
	}

	add_to_variable = { EAI_forts_constructed_on_border_@ROOT = 1 }
}

EAI_add_CFORT_BASE = {
	if = { limit = { ROOT = { has_country_flag = EAI_construction_logging } } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | CONSTRUCTION: EAI_add_CFORT_BASE in [?This.id] [This.GetName]" }
	add_building_construction = {
		type = coastal_bunker
		province = {
			all_provinces = yes
			limit_to_naval_base = yes
		}
		level = 1
		instant_build = no
	}

	add_to_variable = { EAI_forts_constructed_on_bases_@ROOT = 1 }
}

EAI_add_CFORT_COAST = {
	if = { limit = { ROOT = { has_country_flag = EAI_construction_logging } } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | CONSTRUCTION: EAI_add_CFORT_COAST in [?This.id] [This.GetName]" }
	add_building_construction = {
		type = coastal_bunker
		province = {
			all_provinces = yes
			limit_to_coastal = yes
		}
		level = 1
		instant_build = no
	}

	add_to_variable = { EAI_forts_constructed_on_coast_@ROOT = 1 }
}