############################################################################################################
#	Expert AI mod - misc effects  - WA CONVERSION DONE - PIERCING ANALYSIS AND STOCKPILE NOT RETAINED
############################################################################################################

EAI_refresh_gui = {

	if = { limit = { check_variable = { ROOT.EAI_refresh_gui = 0 } } set_variable = { ROOT.EAI_refresh_gui = 1 } }
	else = { set_variable = { ROOT.EAI_refresh_gui = 0 } }
}

###

### simulate naval training for xp (game AI never training its navy workaround)

EAI_train_navy = {

	@TRAINING_AVG_FUEL_CONSUMED_PER_SHIP = 32
	@TRAINING_AVG_XP_GAINED_PER_SHIP = 0.004

	set_temp_variable = { fuel_consumed = @TRAINING_AVG_FUEL_CONSUMED_PER_SHIP }
	multiply_temp_variable = { fuel_consumed = num_ships }
	multiply_temp_variable = { fuel_consumed = -1 }
	add_fuel = fuel_consumed

	set_temp_variable = { xp_gained = @TRAINING_AVG_XP_GAINED_PER_SHIP }
	multiply_temp_variable = { xp_gained = num_ships }
	navy_experience = xp_gained
}

EAI_calc_air_force_sizes = {

	### allied air size

	set_temp_variable = { friendly_air_force_size = num_deployed_planes }
	add_to_temp_variable = { friendly_air_force_size = num_equipment@small_fighter_airframe }

	for_each_scope_loop = { array = allies

		set_temp_variable = { friendly_air_force_size = num_deployed_planes }
		add_to_temp_variable = { friendly_air_force_size = num_equipment@small_fighter_airframe }
	}

	### enemies air size

	every_enemy_country = {

		set_temp_variable = { air_force_size_@THIS = num_deployed_planes }
		add_to_temp_variable = { air_force_size_@THIS = num_equipment@small_fighter_airframe }

		if = { limit = { is_in_faction = yes NOT = { is_faction_leader = yes } }

			var:faction_leader = {

				add_to_temp_variable = { faction_air_force_size_@THIS = air_force_size_@PREV }
			}
		}
		else_if = { limit = { is_faction_leader = yes }

			add_to_temp_variable = { faction_air_force_size_@THIS = air_force_size_@THIS }
			add_to_temp_array = { enemy_air_force_sizes = THIS.id }
		}
		else = { add_to_temp_array = { enemy_air_force_sizes = THIS.id } }
	}
}

EAI_stop_air_production_strategy = {

	if = {
		limit = {
			has_war = yes
			has_capitulated = no
		}

		### abandon air production if overwhelmed by enemy air

		if = {
			limit = {
				has_war = yes
				NOT = { has_country_flag = EAI_stop_air_production }
				surrender_progress > 0.3
				is_major = no
				has_deployed_air_force_size = { size < 300 type = fighter }
			}

			EAI_calc_air_force_sizes =  yes

			### compare

			for_each_scope_loop = { array = enemy_air_force_sizes

				if = { limit = { is_faction_leader = yes }

					if = { limit = { check_variable = { faction_air_force_size_@THIS > 800 } }

						set_temp_variable = { air_force_size_ratio = friendly_air_force_size }
						divide_temp_variable = { air_force_size_ratio = faction_air_force_size_@THIS }

						if = { limit = { check_variable = { air_force_size_ratio < 0.25 } }

							ROOT = {
								set_country_flag = EAI_stop_air_production
								set_country_flag = { flag = EAI_stop_air_production_min_duration value = 1 days = 365 }
								set_country_flag = EAI_anti_air_design_focus
								clear_variable = EAI_no_surrender_progression_months

								if = { limit = { has_country_flag = EAI_logging } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | AIR PRODUCTION: stopping air production" }
							}
						}
					}
				}
				else = {

					if = { limit = { check_variable = { air_force_size_@THIS > 200 } }

						set_temp_variable = { air_force_size_ratio = friendly_air_force_size }
						divide_temp_variable = { air_force_size_ratio = air_force_size_@THIS }

						if = { limit = { check_variable = { air_force_size_ratio < 0.25 } }

							ROOT = {
								set_country_flag = EAI_stop_air_production
								set_country_flag = { flag = EAI_stop_air_production_min_duration value = 1 days = 365 }
								set_country_flag = EAI_anti_air_design_focus
								clear_variable = EAI_no_surrender_progression_months

								if = { limit = { has_country_flag = EAI_logging } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | AIR PRODUCTION: stopping air production" }
							}
						}
					}
				}
			}
		}

		### resume air production conditions

		else_if = {
			limit = {
				has_country_flag = EAI_stop_air_production
				NOT = { has_country_flag = EAI_stop_air_production_min_duration }
			}

			# track how long it has had no surrender progress (track change instead?)
			if = { limit = { NOT = { surrender_progress > 0.05 } }

				add_to_variable = { EAI_no_surrender_progression_months = 1 }
			}
			else = { clear_variable = EAI_no_surrender_progression_months }

			# is not losing anymore or has an airforce
			if = {
				limit = {
					OR = {
						check_variable = { EAI_no_surrender_progression_months > 5 }
						has_deployed_air_force_size = { size > 400 type = fighter }
					}
				}

				clr_country_flag = EAI_stop_air_production
				if = { limit = { has_country_flag = EAI_logging } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | AIR PRODUCTION: restarting air production" }
			}

			# none of its enemies have a significant air force remaining
			else = {

				EAI_calc_air_force_sizes =  yes

				### compare

				for_each_scope_loop = { array = enemy_air_force_sizes

					if = { limit = { is_faction_leader = yes }

						if = { limit = { check_variable = { faction_air_force_size_@THIS > 800 } }

							set_temp_variable = { break = 1 }
						}
					}
					else = {

						if = { limit = { check_variable = { air_force_size_@THIS > 200 } }

							set_temp_variable = { break = 1 }
						}
					}
				}

				if = { limit = { check_variable = { break = 0 } }

					clr_country_flag = EAI_stop_air_production
					if = { limit = { has_country_flag = EAI_logging } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | AIR PRODUCTION: restarting air production" }
				}
			}
		}
	}
	else = { clr_country_flag = EAI_stop_air_production }
}

EAI_enable_garrison_state_strategies = {

	if = {
		limit = {
			if = { limit = { has_war = yes }
				alliance_naval_strength_ratio < 3
			}
			else = { has_war = no }

			### exceptions

			# JAP needs troops vs CHi
			if = { limit = { tag = JAP }

				OR = {
					date > 1940.1.1
					alliance_naval_strength_ratio < 3
				}
			}
		}

		set_country_flag = EAI_enable_garrison_state_strategies
	}
	else = { clr_country_flag = EAI_enable_garrison_state_strategies }
}

EAI_defensive_front_strategy = {

	if = { limit = { has_war = yes }

		### critically low on equipment

		if = { limit = { check_variable = { EAI_fielded_eq_ratio < 0.6 } }

			if = { limit = { NOT = { has_country_flag = EAI_defensive_front_strategy } }

				log = "[GetYear] [GetMonth] | AI | [Root.GetName] | stopping attacks due to low equipment"
			}

			set_country_flag = EAI_defensive_front_strategy
		}
		else_if = {
			limit = {
				has_country_flag = EAI_defensive_front_strategy
				check_variable = { EAI_fielded_eq_ratio > 0.9 }
			}

			log = "[GetYear] [GetMonth] | AI | [Root.GetName] | CANCEL stopping attacks due to low equipment"

			clr_country_flag = EAI_defensive_front_strategy
		}

		### weak vs countries

		every_enemy_country = {

			if = {
				limit = {
					ROOT = {
						NOT = { is_in_array = { EAI_defensive_front_strategy_at = PREV.id } }

						alliance_strength_ratio < 0.5
						strength_ratio = { tag = PREV ratio < 0.25 }
					}
				}

				log = "[GetYear] [GetMonth] | AI | [Root.GetName] | stopping attacks vs [This.GetTag] (weak)"

				ROOT = { add_to_array = { EAI_defensive_front_strategy_at = PREV.id } }
			}
			else_if = {
				limit = {
					ROOT = {
						is_in_array = { EAI_defensive_front_strategy_at = PREV.id }

						NOT = {
							alliance_strength_ratio < 0.5
							strength_ratio = { tag = PREV ratio < 0.25 }
						}
					}
				}

				log = "[GetYear] [GetMonth] | AI | [Root.GetName] | CANCEL stopping attacks vs [This.GetTag] (weak)"

				ROOT = { remove_from_array = { EAI_defensive_front_strategy_at = PREV.id } }
			}
		}
	}
}

EAI_calculate_fielded_eq_ratio = {

	### only count equipment that has a major impact in combat

	set_temp_variable = { fielded_eq_ratio = num_equipment_in_armies_k@infantry_equipment }
	divide_temp_variable = { fielded_eq_ratio = num_target_equipment_in_armies_k@infantry_equipment }
	add_to_temp_variable = { tot_fielded_eq_ratio = fielded_eq_ratio }
	add_to_temp_variable = { equipment_count = 1 }

	if = { limit = { check_variable = { num_target_equipment_in_armies_k@heavy_infantry_equipment > 1 } }

		set_temp_variable = { fielded_eq_ratio = num_equipment_in_armies_k@heavy_infantry_equipment }
		divide_temp_variable = { fielded_eq_ratio = num_target_equipment_in_armies_k@heavy_infantry_equipment }
		add_to_temp_variable = { tot_fielded_eq_ratio = fielded_eq_ratio }
		add_to_temp_variable = { equipment_count = 1 }
	}

	if = { limit = { check_variable = { num_target_equipment_in_armies_k@artillery_equipment > 1 } }

		set_temp_variable = { fielded_eq_ratio = num_equipment_in_armies_k@artillery_equipment }
		divide_temp_variable = { fielded_eq_ratio = num_target_equipment_in_armies_k@artillery_equipment }
		add_to_temp_variable = { tot_fielded_eq_ratio = fielded_eq_ratio }
		add_to_temp_variable = { equipment_count = 1 }
	}

	###

	divide_temp_variable = { tot_fielded_eq_ratio = equipment_count }

	set_variable = { EAI_fielded_eq_ratio = tot_fielded_eq_ratio }
}

### resources

# major resource shortages in production lines
EAI_check_resource_shortages = {

	### ALUMINIUM

	if = {
		limit = {
			# there is a deficit
			check_variable = { resource@aluminium < 0 }

			# total needed for production
			set_temp_variable = { aluminium_needed = resource_consumed@aluminium }
			multiply_temp_variable = { aluminium_needed = -1 }
			add_to_temp_variable = { aluminium_needed = resource@aluminium }

			# need is at least this much
			check_variable = { aluminium_needed < -50 }

			# deficit is >5% of total need
			set_temp_variable = { aluminium_deficit = resource@aluminium }
			divide_temp_variable = { aluminium_deficit = aluminium_needed }
			check_variable = { aluminium_deficit > 0.05 }
		}

		add_to_variable = { EAI_aluminium_resource_shortage = 1 }
	}
	else = { subtract_from_variable = { EAI_aluminium_resource_shortage = 1 } }
	clamp_variable = { var = EAI_aluminium_resource_shortage min = 0 max = 3 }
	if = { limit = { has_country_flag = EAI_resources_logging check_variable = { EAI_aluminium_resource_shortage = 3 } } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | RESOURCES: major ALUMINIUM shortage" }

	### RUBBER

	if = {
		limit = {
			# there is a deficit
			check_variable = { resource@rubber < 0 }

			# total needed for production
			set_temp_variable = { rubber_needed = resource_consumed@rubber }
			multiply_temp_variable = { rubber_needed = -1 }
			add_to_temp_variable = { rubber_needed = resource@rubber }

			# need is at least this much
			check_variable = { rubber_needed < -50 }

			# deficit is >5% of total need
			set_temp_variable = { rubber_deficit = resource@rubber }
			divide_temp_variable = { rubber_deficit = rubber_needed }
			check_variable = { rubber_deficit > 0.05 }
		}

		add_to_variable = { EAI_rubber_resource_shortage = 1 }
	}
	else = { subtract_from_variable = { EAI_rubber_resource_shortage = 1 } }
	clamp_variable = { var = EAI_rubber_resource_shortage min = 0 max = 3 }
	if = { limit = { has_country_flag = EAI_resources_logging check_variable = { EAI_rubber_resource_shortage = 3 } } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | RESOURCES: major RUBBER shortage" }

	### TUNGSTEN

	if = {
		limit = {
			# there is a deficit
			check_variable = { resource@tungsten < 0 }

			# total needed for production
			set_temp_variable = { tungsten_needed = resource_consumed@tungsten }
			multiply_temp_variable = { tungsten_needed = -1 }
			add_to_temp_variable = { tungsten_needed = resource@tungsten }

			# need is at least this much
			check_variable = { tungsten_needed < -50 }

			# deficit is >5% of total need
			set_temp_variable = { tungsten_deficit = resource@tungsten }
			divide_temp_variable = { tungsten_deficit = tungsten_needed }
			check_variable = { tungsten_deficit > 0.05 }
		}

		add_to_variable = { EAI_tungsten_resource_shortage = 1 }
	}
	else = { subtract_from_variable = { EAI_tungsten_resource_shortage = 1 } }
	clamp_variable = { var = EAI_tungsten_resource_shortage min = 0 max = 3 }
	if = { limit = { has_country_flag = EAI_resources_logging check_variable = { EAI_tungsten_resource_shortage = 3 } } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | RESOURCES: major TUNGSTEN shortage" }

	### STEEL

	if = {
		limit = {
			# there is a deficit
			check_variable = { resource@steel < 0 }

			# total needed for production
			set_temp_variable = { steel_needed = resource_consumed@steel }
			multiply_temp_variable = { steel_needed = -1 }
			add_to_temp_variable = { steel_needed = resource@steel }

			# need is at least this much
			check_variable = { steel_needed < -50 }

			# deficit is >5% of total need
			set_temp_variable = { steel_deficit = resource@steel }
			divide_temp_variable = { steel_deficit = steel_needed }
			check_variable = { steel_deficit > 0.05 }
		}

		add_to_variable = { EAI_steel_resource_shortage = 1 }
	}
	else = { subtract_from_variable = { EAI_steel_resource_shortage = 1 } }
	clamp_variable = { var = EAI_steel_resource_shortage min = 0 max = 3 }
	if = { limit = { has_country_flag = EAI_resources_logging check_variable = { EAI_steel_resource_shortage = 3 } } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | RESOURCES: major STEEL shortage" }

	### CHROMIUM

	if = {
		limit = {
			# there is a deficit
			check_variable = { resource@chromium < 0 }

			# total needed for production
			set_temp_variable = { chromium_needed = resource_consumed@chromium }
			multiply_temp_variable = { chromium_needed = -1 }
			add_to_temp_variable = { chromium_needed = resource@chromium }

			# need is at least this much
			check_variable = { chromium_needed < -50 }

			# deficit is >5% of total need
			set_temp_variable = { chromium_deficit = resource@chromium }
			divide_temp_variable = { chromium_deficit = chromium_needed }
			check_variable = { chromium_deficit > 0.05 }
		}

		add_to_variable = { EAI_chromium_resource_shortage = 1 }
	}
	else = { subtract_from_variable = { EAI_chromium_resource_shortage = 1 } }
	clamp_variable = { var = EAI_chromium_resource_shortage min = 0 max = 3 }
	if = { limit = { has_country_flag = EAI_resources_logging check_variable = { EAI_chromium_resource_shortage = 3 } } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | RESOURCES: major CHROMIUM shortage" }

	### COAL

	if = {
		limit = {
			# there is a deficit
			check_variable = { resource@coal < 0 }

			# total needed for production
			set_temp_variable = { coal_needed = resource_consumed@coal }
			multiply_temp_variable = { coal_needed = -1 }
			add_to_temp_variable = { coal_needed = resource@coal }

			# need is at least this much
			check_variable = { coal_needed < -50 }

			# deficit is >5% of total need
			set_temp_variable = { coal_deficit = resource@coal }
			divide_temp_variable = { coal_deficit = coal_needed }
			check_variable = { coal_deficit > 0.05 }
		}

		add_to_variable = { EAI_coal_resource_shortage = 1 }
	}
	else = { subtract_from_variable = { EAI_coal_resource_shortage = 1 } }
	clamp_variable = { var = EAI_coal_resource_shortage min = 0 max = 3 }
	if = { limit = { has_country_flag = EAI_resources_logging check_variable = { EAI_coal_resource_shortage = 3 } } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | RESOURCES: major coal shortage" }

	### BAUXITE

	if = {
		limit = {
			# there is a deficit
			check_variable = { resource@bauxite < 0 }

			# total needed for production
			set_temp_variable = { bauxite_needed = resource_consumed@bauxite }
			multiply_temp_variable = { bauxite_needed = -1 }
			add_to_temp_variable = { bauxite_needed = resource@bauxite }

			# need is at least this much
			check_variable = { bauxite_needed < -50 }

			# deficit is >5% of total need
			set_temp_variable = { bauxite_deficit = resource@bauxite }
			divide_temp_variable = { bauxite_deficit = bauxite_needed }
			check_variable = { bauxite_deficit > 0.05 }
		}

		add_to_variable = { EAI_bauxite_resource_shortage = 1 }
	}
	else = { subtract_from_variable = { EAI_bauxite_resource_shortage = 1 } }
	clamp_variable = { var = EAI_bauxite_resource_shortage min = 0 max = 3 }
	if = { limit = { has_country_flag = EAI_resources_logging check_variable = { EAI_bauxite_resource_shortage = 3 } } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | RESOURCES: major bauxite shortage" }

	### IRON

	if = {
		limit = {
			# there is a deficit
			check_variable = { resource@iron < 0 }

			# total needed for production
			set_temp_variable = { iron_needed = resource_consumed@iron }
			multiply_temp_variable = { iron_needed = -1 }
			add_to_temp_variable = { iron_needed = resource@iron }

			# need is at least this much
			check_variable = { iron_needed < -50 }

			# deficit is >5% of total need
			set_temp_variable = { iron_deficit = resource@iron }
			divide_temp_variable = { iron_deficit = iron_needed }
			check_variable = { iron_deficit > 0.05 }
		}

		add_to_variable = { EAI_iron_resource_shortage = 1 }
	}
	else = { subtract_from_variable = { EAI_iron_resource_shortage = 1 } }
	clamp_variable = { var = EAI_iron_resource_shortage min = 0 max = 3 }
	if = { limit = { has_country_flag = EAI_resources_logging check_variable = { EAI_iron_resource_shortage = 3 } } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | RESOURCES: major iron shortage" }
}

# resource need based on deficits or imports
EAI_check_resource_needs = {

	### aluminium

	if = {
		limit = {
			OR = {
				check_variable = { resource@aluminium < -10 }
				check_variable = { resource_imported@aluminium > 10 }
			}
		}

		add_to_variable = { EAI_needs_aluminium = 1 }
	}
	else = { subtract_from_variable = { EAI_needs_aluminium = 1 } }
	clamp_variable = { var = EAI_needs_aluminium min = 0 max = 3 }
	if = { limit = { has_country_flag = EAI_resources_logging check_variable = { EAI_needs_aluminium = 3 } } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | RESOURCES: needs ALUMINIUM" }

	### rubber

	if = {
		limit = {
			OR = {
				check_variable = { resource@rubber < -10 }
				check_variable = { resource_imported@rubber > 10 }
			}
		}

		add_to_variable = { EAI_needs_rubber = 1 }
	}
	else = { subtract_from_variable = { EAI_needs_rubber = 1 } }
	clamp_variable = { var = EAI_needs_rubber min = 0 max = 3 }
	if = { limit = { has_country_flag = EAI_resources_logging check_variable = { EAI_needs_rubber = 3 } } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | RESOURCES: needs RUBBER" }

	### steel

	if = {
		limit = {
			OR = {
				check_variable = { resource@steel < -15 }
				check_variable = { resource_imported@steel > 15 }
			}
		}

		add_to_variable = { EAI_needs_steel = 1 }
	}
	else = { subtract_from_variable = { EAI_needs_steel = 1 } }
	clamp_variable = { var = EAI_needs_steel min = 0 max = 3 }
	if = { limit = { has_country_flag = EAI_resources_logging check_variable = { EAI_needs_steel = 3 } } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | RESOURCES: needs STEEL" }

	### tungsten

	if = {
		limit = {
			OR = {
				check_variable = { resource@tungsten < -15 }
				check_variable = { resource_imported@tungsten > 15 }
			}
		}

		add_to_variable = { EAI_needs_tungsten = 1 }
	}
	else = { subtract_from_variable = { EAI_needs_tungsten = 1 } }
	clamp_variable = { var = EAI_needs_tungsten min = 0 max = 3 }
	if = { limit = { has_country_flag = EAI_resources_logging check_variable = { EAI_needs_tungsten = 3 } } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | RESOURCES: needs TUNGSTEN" }

	### chromium

	if = {
		limit = {
			OR = {
				check_variable = { resource@chromium < -15 }
				check_variable = { resource_imported@chromium > 15 }
			}
		}

		add_to_variable = { EAI_needs_chromium = 1 }
	}
	else = { subtract_from_variable = { EAI_needs_chromium = 1 } }
	clamp_variable = { var = EAI_needs_chromium min = 0 max = 3 }
	if = { limit = { has_country_flag = EAI_resources_logging check_variable = { EAI_needs_chromium = 3 } } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | RESOURCES: needs CHROMIUM" }

	### coal

	if = {
		limit = {
			OR = {
				check_variable = { resource@coal < -40 }
				check_variable = { resource_imported@coal > 40 }
			}
		}

		add_to_variable = { EAI_needs_coal = 1 }
	}
	else = { subtract_from_variable = { EAI_needs_coal = 1 } }
	clamp_variable = { var = EAI_needs_coal min = 0 max = 3 }
	if = { limit = { has_country_flag = EAI_resources_logging check_variable = { EAI_needs_coal = 3 } } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | RESOURCES: needs coal" }

	### bauxite

	if = {
		limit = {
			OR = {
				check_variable = { resource@bauxite < -25 }
				check_variable = { resource_imported@bauxite > 25 }
			}
		}

		add_to_variable = { EAI_needs_bauxite = 1 }
	}
	else = { subtract_from_variable = { EAI_needs_bauxite = 1 } }
	clamp_variable = { var = EAI_needs_bauxite min = 0 max = 3 }
	if = { limit = { has_country_flag = EAI_resources_logging check_variable = { EAI_needs_bauxite = 3 } } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | RESOURCES: needs bauxite" }

	### iron

	if = {
		limit = {
			OR = {
				check_variable = { resource@iron < -25 }
				check_variable = { resource_imported@iron > 25 }
			}
		}

		add_to_variable = { EAI_needs_iron = 1 }
	}
	else = { subtract_from_variable = { EAI_needs_iron = 1 } }
	clamp_variable = { var = EAI_needs_iron min = 0 max = 3 }
	if = { limit = { has_country_flag = EAI_resources_logging check_variable = { EAI_needs_iron = 3 } } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | RESOURCES: needs iron" }

	##################################################################################

	### allied resource needs

	for_each_scope_loop = { array = allies

		if = { limit = { check_variable = { resource@aluminium < -20 } } 	ROOT = { set_country_flag = { flag = EAI_allies_need_aluminium value = 1 days = 30 } } }
		if = { limit = { check_variable = { resource@rubber < -20 } } 		ROOT = { set_country_flag = { flag = EAI_allies_need_rubber value = 1 days = 30 } } }
		if = { limit = { check_variable = { resource@tungsten < -20 } } 	ROOT = { set_country_flag = { flag = EAI_allies_need_tungsten value = 1 days = 30 } } }
		if = { limit = { check_variable = { resource@steel < -20 } } 		ROOT = { set_country_flag = { flag = EAI_allies_need_steel value = 1 days = 30 } } }
		if = { limit = { check_variable = { resource@chromium < -20 } } 	ROOT = { set_country_flag = { flag = EAI_allies_need_chromium value = 1 days = 30 } } }
		if = { limit = { check_variable = { resource@coal < -20 } } 	    ROOT = { set_country_flag = { flag = EAI_allies_need_coal value = 1 days = 30 } } }
		if = { limit = { check_variable = { resource@bauxite < -20 } }   	ROOT = { set_country_flag = { flag = EAI_allies_need_bauxite value = 1 days = 30 } } }
		if = { limit = { check_variable = { resource@iron < -20 } }     	ROOT = { set_country_flag = { flag = EAI_allies_need_iron value = 1 days = 30 } } }
	}
}

EAI_calculate_fuel_need = {

	### air

	set_temp_variable = { air_force_size = num_deployed_planes }

	multiply_temp_variable = { air_force_size = 1.8 } # fuel consumption estimate

	### land

	set_temp_variable = { armor_size = 0 }

	set_temp_variable = { armor_size = num_battalions_with_type@medium_armor }
	add_to_temp_variable = { armor_size = num_battalions_with_type@medium_sp_anti_air_brigade }
	add_to_temp_variable = { armor_size = num_battalions_with_type@medium_sp_artillery_brigade }
	add_to_temp_variable = { armor_size = num_battalions_with_type@medium_tank_destroyer_brigade }

	add_to_temp_variable = { armor_size = num_battalions_with_type@heavy_armor }
	add_to_temp_variable = { armor_size = num_battalions_with_type@heavy_sp_anti_air_brigade }
	add_to_temp_variable = { armor_size = num_battalions_with_type@heavy_sp_artillery_brigade }
	add_to_temp_variable = { armor_size = num_battalions_with_type@heavy_tank_destroyer_brigade }

	add_to_temp_variable = { armor_size = num_battalions_with_type@modern_armor }
	add_to_temp_variable = { armor_size = num_battalions_with_type@modern_sp_anti_air_brigade }
	add_to_temp_variable = { armor_size = num_battalions_with_type@modern_sp_artillery_brigade }
	add_to_temp_variable = { armor_size = num_battalions_with_type@modern_tank_destroyer_brigade }

	add_to_temp_variable = { armor_size = num_battalions_with_type@light_armor }
	add_to_temp_variable = { armor_size = num_battalions_with_type@light_sp_anti_air_brigade }
	add_to_temp_variable = { armor_size = num_battalions_with_type@light_sp_artillery_brigade }
	add_to_temp_variable = { armor_size = num_battalions_with_type@light_tank_destroyer_brigade }

	multiply_temp_variable = { armor_size = 50 } # fuel consumption estimate

	### navy

	set_temp_variable = { navy_size = num_ships }

	multiply_temp_variable = { navy_size = 60 } # fuel consumption estimate

	### total

	set_variable = { EAI_max_fuel_consumption_estimate = air_force_size }
	add_to_variable = { EAI_max_fuel_consumption_estimate = armor_size }
	add_to_variable = { EAI_max_fuel_consumption_estimate = navy_size }
}

# command power cost when changing an ally's military focuses
EAI_calculate_config_cp_cost = {

	if = { 		limit = { strength_ratio = { tag = ROOT ratio > 1.0 } } 			set_variable = { ROOT.EAI_config_cp_cost = 100 } }
	else_if = { limit = { strength_ratio = { tag = ROOT ratio > 0.9 } } 			set_variable = { ROOT.EAI_config_cp_cost = 90 } }
	else_if = { limit = { strength_ratio = { tag = ROOT ratio > 0.8 } } 			set_variable = { ROOT.EAI_config_cp_cost = 80 } }
	else_if = { limit = { strength_ratio = { tag = ROOT ratio > 0.7 } } 			set_variable = { ROOT.EAI_config_cp_cost = 70 } }
	else_if = { limit = { strength_ratio = { tag = ROOT ratio > 0.6 } } 			set_variable = { ROOT.EAI_config_cp_cost = 60 } }
	else_if = { limit = { strength_ratio = { tag = ROOT ratio > 0.5 } } 			set_variable = { ROOT.EAI_config_cp_cost = 50 } }
	else_if = { limit = { strength_ratio = { tag = ROOT ratio > 0.4 } } 			set_variable = { ROOT.EAI_config_cp_cost = 40 } }
	else_if = { limit = { strength_ratio = { tag = ROOT ratio > 0.3 } } 			set_variable = { ROOT.EAI_config_cp_cost = 30 } }
	else_if = { limit = { strength_ratio = { tag = ROOT ratio > 0.2 } } 			set_variable = { ROOT.EAI_config_cp_cost = 20 } }
	else_if = { limit = { strength_ratio = { tag = ROOT ratio > 0.1 } } 			set_variable = { ROOT.EAI_config_cp_cost = 10 } }
	else_if = { limit = { NOT = { strength_ratio = { tag = ROOT ratio > 0.1 } } } 	set_variable = { ROOT.EAI_config_cp_cost = 10 } }

	multiply_variable = { ROOT.EAI_config_cp_cost = 0.5 }

	if = { limit = { is_subject_of = ROOT }
		multiply_variable = { ROOT.EAI_config_cp_cost = 0.5 } # 50% cheaper on subjects
	}

	if = { limit = { ROOT = { is_subject_of = PREV } }
		multiply_variable = { ROOT.EAI_config_cp_cost = 1.5 } # 50% more expensive on overlord
	}

	# clamp_variable = { var = ROOT.EAI_config_cp_cost_@THIS min = 0 max = 100 } # max cost to allow weak minors to influence overlords

	set_variable = { ROOT.EAI_config_cp_cost_effect = ROOT.EAI_config_cp_cost }

	multiply_variable = { ROOT.EAI_config_cp_cost_effect = -1 }
}

EAI_num_surface_ships = {

	set_variable = { EAI_num_surface_ships = num_ships_with_type@destroyer }
	add_to_variable = { EAI_num_surface_ships = num_ships_with_type@light_cruiser }
	add_to_variable = { EAI_num_surface_ships = num_ships_with_type@heavy_cruiser }
	add_to_variable = { EAI_num_surface_ships = num_ships_with_type@battle_cruiser }
	add_to_variable = { EAI_num_surface_ships = num_ships_with_type@battleship }
	add_to_variable = { EAI_num_surface_ships = num_ships_with_type@frigate }
}

# stockpile display
EAI_set_stockpile_variables = {

	set_variable = { EAI_stockpile_infantry_equipment = Prev.num_equipment@infantry_equipment }
	set_variable = { EAI_str_ratio_infantry_equipment = Prev.num_equipment_in_armies@infantry_equipment }
	divide_variable = { EAI_str_ratio_infantry_equipment = Prev.num_target_equipment_in_armies@infantry_equipment }
	multiply_variable = { EAI_str_ratio_infantry_equipment = 100 }

	set_variable = { EAI_stockpile_heavy_infantry_equipment = Prev.num_equipment@heavy_infantry_equipment }
	set_variable = { EAI_str_ratio_heavy_infantry_equipment = Prev.num_equipment_in_armies@heavy_infantry_equipment }
	divide_variable = { EAI_str_ratio_heavy_infantry_equipment = Prev.num_target_equipment_in_armies@heavy_infantry_equipment }
	multiply_variable = { EAI_str_ratio_heavy_infantry_equipment = 100 }

	set_variable = { EAI_stockpile_support_equipment = Prev.num_equipment@support_equipment }
	set_variable = { EAI_str_ratio_support_equipment = Prev.num_equipment_in_armies@support_equipment }
	divide_variable = { EAI_str_ratio_support_equipment = Prev.num_target_equipment_in_armies@support_equipment }
	multiply_variable = { EAI_str_ratio_support_equipment = 100 }

	set_variable = { EAI_stockpile_motorized_equipment = Prev.num_equipment@motorized_equipment }
	set_variable = { EAI_str_ratio_motorized_equipment = Prev.num_equipment_in_armies@motorized_equipment }
	divide_variable = { EAI_str_ratio_motorized_equipment = Prev.num_target_equipment_in_armies@motorized_equipment }
	multiply_variable = { EAI_str_ratio_motorized_equipment = 100 }

	set_variable = { EAI_stockpile_mechanized_equipment = Prev.num_equipment@mechanized_equipment }
	set_variable = { EAI_str_ratio_mechanized_equipment = Prev.num_equipment_in_armies@mechanized_equipment }
	divide_variable = { EAI_str_ratio_mechanized_equipment = Prev.num_target_equipment_in_armies@mechanized_equipment }
	multiply_variable = { EAI_str_ratio_mechanized_equipment = 100 }

	set_variable = { EAI_stockpile_artillery_equipment = Prev.num_equipment@artillery_equipment }
	set_variable = { EAI_str_ratio_artillery_equipment = Prev.num_equipment_in_armies@artillery_equipment }
	divide_variable = { EAI_str_ratio_artillery_equipment = Prev.num_target_equipment_in_armies@artillery_equipment }
	multiply_variable = { EAI_str_ratio_artillery_equipment = 100 }

	set_variable = { EAI_stockpile_heavy_artillery_equipment = Prev.num_equipment@heavy_artillery_equipment }
	set_variable = { EAI_str_ratio_heavy_artillery_equipment = Prev.num_equipment_in_armies@heavy_artillery_equipment }
	divide_variable = { EAI_str_ratio_heavy_artillery_equipment = Prev.num_target_equipment_in_armies@heavy_artillery_equipment }
	multiply_variable = { EAI_str_ratio_heavy_artillery_equipment = 100 }

	set_variable = { EAI_stockpile_rocket_artillery_equipment = Prev.num_equipment@rocket_artillery_equipment }
	set_variable = { EAI_str_ratio_rocket_artillery_equipment = Prev.num_equipment_in_armies@rocket_artillery_equipment }
	divide_variable = { EAI_str_ratio_rocket_artillery_equipment = Prev.num_target_equipment_in_armies@rocket_artillery_equipment }
	multiply_variable = { EAI_str_ratio_rocket_artillery_equipment = 100 }

	set_variable = { EAI_stockpile_motorized_rocket_equipment = Prev.num_equipment@motorized_rocket_equipment }
	set_variable = { EAI_str_ratio_motorized_rocket_equipment = Prev.num_equipment_in_armies@motorized_rocket_equipment }
	divide_variable = { EAI_str_ratio_motorized_rocket_equipment = Prev.num_target_equipment_in_armies@motorized_rocket_equipment }
	multiply_variable = { EAI_str_ratio_motorized_rocket_equipment = 100 }

	set_variable = { EAI_stockpile_anti_tank_equipment = Prev.num_equipment@anti_tank_equipment }
	set_variable = { EAI_str_ratio_anti_tank_equipment = Prev.num_equipment_in_armies@anti_tank_equipment }
	divide_variable = { EAI_str_ratio_anti_tank_equipment = Prev.num_target_equipment_in_armies@anti_tank_equipment }
	multiply_variable = { EAI_str_ratio_anti_tank_equipment = 100 }

	set_variable = { EAI_stockpile_anti_air_equipment = Prev.num_equipment@anti_air_equipment }
	set_variable = { EAI_str_ratio_anti_air_equipment = Prev.num_equipment_in_armies@anti_air_equipment }
	divide_variable = { EAI_str_ratio_anti_air_equipment = Prev.num_target_equipment_in_armies@anti_air_equipment }
	multiply_variable = { EAI_str_ratio_anti_air_equipment = 100 }


	set_variable = { EAI_stockpile_light_tank_equipment = Prev.num_equipment@light_tank_chassis }
	set_variable = { EAI_str_ratio_light_tank_equipment = Prev.num_equipment_in_armies@light_tank_chassis }
	divide_variable = { EAI_str_ratio_light_tank_equipment = Prev.num_target_equipment_in_armies@light_tank_chassis }
	multiply_variable = { EAI_str_ratio_light_tank_equipment = 100 }

	set_variable = { EAI_stockpile_light_tank_artillery_chassis = Prev.num_equipment@light_tank_artillery_chassis }
	set_variable = { EAI_str_ratio_light_tank_artillery_chassis = Prev.num_equipment_in_armies@light_tank_artillery_chassis }
	divide_variable = { EAI_str_ratio_light_tank_artillery_chassis = Prev.num_target_equipment_in_armies@light_tank_artillery_chassis }
	multiply_variable = { EAI_str_ratio_light_tank_artillery_chassis = 100 }

	set_variable = { EAI_stockpile_light_tank_destroyer_chassis = Prev.num_equipment@light_tank_destroyer_chassis }
	set_variable = { EAI_str_ratio_light_tank_destroyer_chassis = Prev.num_equipment_in_armies@light_tank_destroyer_chassis }
	divide_variable = { EAI_str_ratio_light_tank_destroyer_chassis = Prev.num_target_equipment_in_armies@light_tank_destroyer_chassis }
	multiply_variable = { EAI_str_ratio_light_tank_destroyer_chassis = 100 }

	set_variable = { EAI_stockpile_light_tank_aa_chassis = Prev.num_equipment@light_tank_aa_chassis }
	set_variable = { EAI_str_ratio_light_tank_aa_chassis = Prev.num_equipment_in_armies@light_tank_aa_chassis }
	divide_variable = { EAI_str_ratio_light_tank_aa_chassis = Prev.num_target_equipment_in_armies@light_tank_aa_chassis }
	multiply_variable = { EAI_str_ratio_light_tank_aa_chassis = 100 }


	set_variable = { EAI_stockpile_medium_tank_equipment = Prev.num_equipment@medium_tank_chassis }
	set_variable = { EAI_str_ratio_medium_tank_equipment = Prev.num_equipment_in_armies@medium_tank_chassis }
	divide_variable = { EAI_str_ratio_medium_tank_equipment = Prev.num_target_equipment_in_armies@medium_tank_chassis }
	multiply_variable = { EAI_str_ratio_medium_tank_equipment = 100 }

	set_variable = { EAI_stockpile_medium_tank_artillery_chassis = Prev.num_equipment@medium_tank_artillery_chassis }
	set_variable = { EAI_str_ratio_medium_tank_artillery_chassis = Prev.num_equipment_in_armies@medium_tank_artillery_chassis }
	divide_variable = { EAI_str_ratio_medium_tank_artillery_chassis = Prev.num_target_equipment_in_armies@medium_tank_artillery_chassis }
	multiply_variable = { EAI_str_ratio_medium_tank_artillery_chassis = 100 }

	set_variable = { EAI_stockpile_medium_tank_destroyer_chassis = Prev.num_equipment@medium_tank_destroyer_chassis }
	set_variable = { EAI_str_ratio_medium_tank_destroyer_chassis = Prev.num_equipment_in_armies@medium_tank_destroyer_chassis }
	divide_variable = { EAI_str_ratio_medium_tank_destroyer_chassis = Prev.num_target_equipment_in_armies@medium_tank_destroyer_chassis }
	multiply_variable = { EAI_str_ratio_medium_tank_destroyer_chassis = 100 }

	set_variable = { EAI_stockpile_medium_tank_aa_chassis = Prev.num_equipment@medium_tank_aa_chassis }
	set_variable = { EAI_str_ratio_medium_tank_aa_chassis = Prev.num_equipment_in_armies@medium_tank_aa_chassis }
	divide_variable = { EAI_str_ratio_medium_tank_aa_chassis = Prev.num_target_equipment_in_armies@medium_tank_aa_chassis }
	multiply_variable = { EAI_str_ratio_medium_tank_aa_chassis = 100 }


	set_variable = { EAI_stockpile_heavy_tank_chassis = Prev.num_equipment@heavy_tank_chassis }
	set_variable = { EAI_str_ratio_heavy_tank_chassis = Prev.num_equipment_in_armies@heavy_tank_chassis }
	divide_variable = { EAI_str_ratio_heavy_tank_chassis = Prev.num_target_equipment_in_armies@heavy_tank_chassis }
	multiply_variable = { EAI_str_ratio_heavy_tank_chassis = 100 }

	set_variable = { EAI_stockpile_heavy_tank_artillery_chassis = Prev.num_equipment@heavy_tank_artillery_chassis }
	set_variable = { EAI_str_ratio_heavy_tank_artillery_chassis = Prev.num_equipment_in_armies@heavy_tank_artillery_chassis }
	divide_variable = { EAI_str_ratio_heavy_tank_artillery_chassis = Prev.num_target_equipment_in_armies@heavy_tank_artillery_chassis }
	multiply_variable = { EAI_str_ratio_heavy_tank_artillery_chassis = 100 }

	set_variable = { EAI_stockpile_heavy_tank_destroyer_chassis = Prev.num_equipment@heavy_tank_destroyer_chassis }
	set_variable = { EAI_str_ratio_heavy_tank_destroyer_chassis = Prev.num_equipment_in_armies@heavy_tank_destroyer_chassis }
	divide_variable = { EAI_str_ratio_heavy_tank_destroyer_chassis = Prev.num_target_equipment_in_armies@heavy_tank_destroyer_chassis }
	multiply_variable = { EAI_str_ratio_heavy_tank_destroyer_chassis = 100 }

	set_variable = { EAI_stockpile_heavy_tank_aa_chassis = Prev.num_equipment@heavy_tank_aa_chassis }
	set_variable = { EAI_str_ratio_heavy_tank_aa_chassis = Prev.num_equipment_in_armies@heavy_tank_aa_chassis }
	divide_variable = { EAI_str_ratio_heavy_tank_aa_chassis = Prev.num_target_equipment_in_armies@heavy_tank_aa_chassis }
	multiply_variable = { EAI_str_ratio_heavy_tank_aa_chassis = 100 }


	set_variable = { EAI_stockpile_modern_tank_chassis = Prev.num_equipment@modern_tank_chassis }
	set_variable = { EAI_str_ratio_modern_tank_chassis = Prev.num_equipment_in_armies@modern_tank_chassis }
	divide_variable = { EAI_str_ratio_modern_tank_chassis = Prev.num_target_equipment_in_armies@modern_tank_chassis }
	multiply_variable = { EAI_str_ratio_modern_tank_chassis = 100 }

	set_variable = { EAI_stockpile_modern_tank_artillery_chassis = Prev.num_equipment@modern_tank_artillery_chassis }
	set_variable = { EAI_str_ratio_modern_tank_artillery_chassis = Prev.num_equipment_in_armies@modern_tank_artillery_chassis }
	divide_variable = { EAI_str_ratio_modern_tank_artillery_chassis = Prev.num_target_equipment_in_armies@modern_tank_artillery_chassis }
	multiply_variable = { EAI_str_ratio_modern_tank_artillery_chassis = 100 }

	set_variable = { EAI_stockpile_modern_tank_destroyer_chassis = Prev.num_equipment@modern_tank_destroyer_chassis }
	set_variable = { EAI_str_ratio_modern_tank_destroyer_chassis = Prev.num_equipment_in_armies@modern_tank_destroyer_chassis }
	divide_variable = { EAI_str_ratio_modern_tank_destroyer_chassis = Prev.num_target_equipment_in_armies@modern_tank_destroyer_chassis }
	multiply_variable = { EAI_str_ratio_modern_tank_destroyer_chassis = 100 }

	set_variable = { EAI_stockpile_modern_tank_aa_chassis = Prev.num_equipment@modern_tank_aa_chassis }
	set_variable = { EAI_str_ratio_modern_tank_aa_chassis = Prev.num_equipment_in_armies@modern_tank_aa_chassis }
	divide_variable = { EAI_str_ratio_modern_tank_aa_chassis = Prev.num_target_equipment_in_armies@modern_tank_aa_chassis }
	multiply_variable = { EAI_str_ratio_modern_tank_aa_chassis = 100 }

	PREV = {
		set_variable = { ROOT.EAI_stockpile_convoy_equipment = 0 }
		while_loop_effect = {
			limit = {
				meta_trigger = {
					text = { stockpile_ratio = { archetype = convoy ratio > [x] } }
					x = "[?ROOT.EAI_stockpile_convoy_equipment]"
				}
			}
			add_to_variable = { ROOT.EAI_stockpile_convoy_equipment = 1 }
		}

		set_variable = { ROOT.EAI_fielded_convoy_equipment = 0 }
		while_loop_effect = {
			limit = {
				meta_trigger = {
					text = { has_navy_size = { size > [x] type = convoy } }
					x = "[?ROOT.EAI_fielded_convoy_equipment]"
				}
			}
			add_to_variable = { ROOT.EAI_fielded_convoy_equipment = 1 }
		}
	}
	subtract_from_variable = { EAI_fielded_convoy_equipment = EAI_stockpile_convoy_equipment }


	set_variable = { EAI_stockpile_fuel = Prev.fuel_k }
	set_variable = { EAI_str_ratio_fuel = Prev.fuel_ratio }
	multiply_variable = { EAI_str_ratio_fuel = 100 }
}
EAI_clear_stockpile_variables = {

	clear_variable = EAI_stockpile_infantry_equipment
	clear_variable = EAI_str_ratio_infantry_equipment

	clear_variable = EAI_stockpile_heavy_infantry_equipment
	clear_variable = EAI_str_ratio_heavy_infantry_equipment

	clear_variable = EAI_stockpile_support_equipment
	clear_variable = EAI_str_ratio_support_equipment

	clear_variable = EAI_stockpile_motorized_equipment
	clear_variable = EAI_str_ratio_motorized_equipment

	clear_variable = EAI_stockpile_mechanized_equipment
	clear_variable = EAI_str_ratio_mechanized_equipment

	clear_variable = EAI_stockpile_artillery_equipment
	clear_variable = EAI_str_ratio_artillery_equipment

	clear_variable = EAI_stockpile_heavy_artillery_equipment
	clear_variable = EAI_str_ratio_heavy_artillery_equipment

	clear_variable = EAI_stockpile_rocket_artillery_equipment
	clear_variable = EAI_str_ratio_rocket_artillery_equipment

	clear_variable = EAI_stockpile_motorized_rocket_equipment
	clear_variable = EAI_str_ratio_motorized_rocket_equipment

	clear_variable = EAI_stockpile_anti_tank_equipment
	clear_variable = EAI_str_ratio_anti_tank_equipment

	clear_variable = EAI_stockpile_anti_air_equipment
	clear_variable = EAI_str_ratio_anti_air_equipment


	clear_variable = EAI_stockpile_light_tank_equipment
	clear_variable = EAI_str_ratio_light_tank_equipment

	clear_variable = EAI_stockpile_light_tank_artillery_chassis
	clear_variable = EAI_str_ratio_light_tank_artillery_chassis

	clear_variable = EAI_stockpile_light_tank_destroyer_chassis
	clear_variable = EAI_str_ratio_light_tank_destroyer_chassis

	clear_variable = EAI_stockpile_light_tank_aa_chassis
	clear_variable = EAI_str_ratio_light_tank_aa_chassis


	clear_variable = EAI_stockpile_medium_tank_equipment
	clear_variable = EAI_str_ratio_medium_tank_equipment

	clear_variable = EAI_stockpile_medium_tank_artillery_chassis
	clear_variable = EAI_str_ratio_medium_tank_artillery_chassis

	clear_variable = EAI_stockpile_medium_tank_destroyer_chassis
	clear_variable = EAI_str_ratio_medium_tank_destroyer_chassis

	clear_variable = EAI_stockpile_medium_tank_aa_chassis
	clear_variable = EAI_str_ratio_medium_tank_aa_chassis


	clear_variable = EAI_stockpile_heavy_tank_chassis
	clear_variable = EAI_str_ratio_heavy_tank_chassis

	clear_variable = EAI_stockpile_heavy_tank_artillery_chassis
	clear_variable = EAI_str_ratio_heavy_tank_artillery_chassis

	clear_variable = EAI_stockpile_heavy_tank_destroyer_chassis
	clear_variable = EAI_str_ratio_heavy_tank_destroyer_chassis

	clear_variable = EAI_stockpile_heavy_tank_aa_chassis
	clear_variable = EAI_str_ratio_heavy_tank_aa_chassis


	clear_variable = EAI_stockpile_modern_tank_chassis
	clear_variable = EAI_str_ratio_modern_tank_chassis

	clear_variable = EAI_stockpile_modern_tank_artillery_chassis
	clear_variable = EAI_str_ratio_modern_tank_artillery_chassis

	clear_variable = EAI_stockpile_modern_tank_destroyer_chassis
	clear_variable = EAI_str_ratio_modern_tank_destroyer_chassis

	clear_variable = EAI_stockpile_modern_tank_aa_chassis
	clear_variable = EAI_str_ratio_modern_tank_aa_chassis


	clear_variable = EAI_stockpile_convoy_equipment
	clear_variable = EAI_fielded_convoy_equipment


	clear_variable = EAI_stockpile_fuel
	clear_variable = EAI_str_ratio_fuel
}

# submarines lost during 20 days
EAI_track_submarine_losses = {

	set_temp_variable = {WA_total_subs = num_ships_with_type@submarine}
	add_to_temp_variable = {WA_total_subs = num_ships_with_type@cruiser_submarine}

	subtract_from_variable = { EAI_previous_subs = WA_total_subs }

	if = { limit = { check_variable = { EAI_previous_subs > 0 } }

		divide_variable = { EAI_previous_subs = WA_total_subs }
		if = { limit = { check_variable = { EAI_previous_subs > 0.05 } } # lost more than 5%
			set_country_flag = { flag = EAI_halt_sub_missions value = 1 days = 14 }
		}
	}

	set_variable = { EAI_previous_subs = WA_total_subs }
}

# track the max armor value seen from other countries and the max piercing value of this country
# EAI_armor_intel_check = {

# 	if = {
# 		limit = {
# 			OR = { # only check if it has a template that can upgrade its piercing
# 				has_country_flag = EAI_anti_tank_template_upgrade
# 				has_country_flag = EAI_marm_template_upgrade
# 				has_country_flag = EAI_harm_template_upgrade
# 			}
# 		}

# 		### armor intel from other countries

# 		# enemies + neighbors

# 		set_temp_variable = { armor_intel_value = EAI_max_armor_seen }

# 		while_loop_effect = { limit = { check_variable = { armor_intel_value < 200 } }

# 			if = {
# 				limit = {
# 					meta_trigger = {
# 						text = {
# 							NOT = {
# 								any_neighbor_country = {
# 									EAI_is_threat = yes
# 									ROOT = { estimated_intel_max_armor = { tag = PREV value > [x] } }
# 								}
# 								any_enemy_country = { ROOT = { estimated_intel_max_armor = { tag = PREV value > [x] } } }
# 							}
# 						}
# 						x = "[?armor_intel_value|.0]"
# 					}
# 				}

# 				if = { limit = { NOT = { check_variable = { EAI_max_armor_seen = armor_intel_value } } }

# 					if = { limit = { has_country_flag = EAI_logging } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | ARMOR INTEL: new highest armor intel value = [?armor_intel_value]" }
# 				}

# 				set_variable = { EAI_max_armor_seen = armor_intel_value }
# 				set_temp_variable = { break = 1 }
# 			}

# 			add_to_temp_variable = { armor_intel_value = 5 }
# 		}

# 		# enemies only

# 		set_temp_variable = { armor_intel_value = EAI_max_armor_seen_enemies }

# 		while_loop_effect = { limit = { check_variable = { armor_intel_value < 200 } }

# 			if = {
# 				limit = {
# 					meta_trigger = {
# 						text = {
# 							NOT = {
# 								any_enemy_country = { ROOT = { estimated_intel_max_armor = { tag = PREV value > [x] } } }
# 							}
# 						}
# 						x = "[?armor_intel_value|.0]"
# 					}
# 				}

# 				if = { limit = { NOT = { check_variable = { EAI_max_armor_seen_enemies = armor_intel_value } } }

# 					if = { limit = { has_country_flag = EAI_logging } log = "[GetYear] [GetMonth] | AI | [Root.GetName] | ARMOR INTEL: new enemies highest armor intel value = [?armor_intel_value]" }
# 				}

# 				set_variable = { EAI_max_armor_seen_enemies = armor_intel_value }
# 				set_temp_variable = { break = 1 }
# 			}

# 			add_to_temp_variable = { armor_intel_value = 5 }
# 		}

# 		### armor piercing of this country

# 		set_temp_variable = { piercing_value = EAI_max_piercing }

# 		while_loop_effect = { limit = { check_variable = { piercing_value < 200 } }

# 			if = {
# 				limit = {
# 					meta_trigger = {
# 						text = {
# 							NOT = { ROOT = { estimated_intel_max_piercing = { tag = ROOT value > [x] } } }
# 						}
# 						x = "[?piercing_value|.0]"
# 					}
# 				}

# 				set_variable = { EAI_max_piercing = piercing_value }
# 				set_temp_variable = { break = 1 }
# 			}

# 			add_to_temp_variable = { piercing_value = 2 }
# 		}
# 	}
# }

EAI_test_effect = {

	log = "=============== test ==============="

	if = {
		limit = {
			has_country_flag = FRA_central_africa_promised_independence
		}

		log = "yes"
	}
	else = {
		log = "no"
	}

	log = "=============== end test ==============="
}