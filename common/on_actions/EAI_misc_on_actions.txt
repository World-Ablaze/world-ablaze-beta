############################################################################################################
#	Expert AI mod - on_actions
############################################################################################################

on_actions = {
	on_daily = {
		effect = {

			### cancel invalid projects

#			if = { limit = { check_variable = { EAI_PC_active_projects > 0 } }
#
#				for_each_loop = { array = EAI_PC_project_array
#
#					if = { limit = { check_variable = { v < 0 } }
#
#						set_variable = { EAI_PC_project_type = i }
#
#						if = {
#							limit = {
#								OR = {
#									CONTROLLER = { has_war_with = ROOT } # target state controller at war with project owner
#
#									var:v = { NOT = { EAI_PC_building_slot_available = yes } } # building slot unavailable in target state
#								}
#							}
#
#							set_variable = { EAI_PC_project = i }
#							EAI_PC_end_project = yes
#						}
#					}
#				}
#
#				clear_variable = EAI_PC_project_type
#			}

			### ai scripts

			if = { limit = { is_ai = yes }

				### train navy (game AI never training its navy workaround)

				if = {
					limit = {
						check_variable = { num_ships > 0 }
						OR = {
							has_war = no
							alliance_naval_strength_ratio > 10
						}
						has_navy_experience < 100
						fuel_ratio > 0.5
					}

					EAI_train_navy = yes
				}

				###

				# EAI_manage_xp = yes

				if = { 
					limit = {
						num_of_available_civilian_factories > 1
						NOT = {
							has_country_flag = EAI_construction_timer
						}
					}
					country_event = EAI_C.10
				}
			}
		}
	}
	on_weekly = {
		effect = {

			if = { limit = { check_variable = { EAI_prepare_for_war_targets^num > 0 } }

				for_each_scope_loop = { array = EAI_prepare_for_war_targets

					if = { limit = { NOT = { has_country_flag = EAI_prepare_for_war_from_@ROOT } }

						add_to_temp_array = { remove_prepare_for_war_targets = THIS.id }
					}
				}

				for_each_scope_loop = { array = remove_prepare_for_war_targets

					remove_from_array = { array = ROOT.EAI_prepare_for_war_targets value = THIS.id }
				}
			}
		}
	}
	on_bi_yearly_pulse = {
		effect = {

			if = { limit = { NOT = { has_country_flag = EAI_on_bi_yearly_pulse_checked } } # on_bi_yearly_pulse triggers 24x per pulse?

				set_country_flag = { flag = EAI_on_bi_yearly_pulse_checked value = 1 days = 10 }
			}
		}
	}
	on_puppet = {
		effect = {

			### clear ideology advisors

			ROOT = {

				if = { limit = { is_ai = yes }

					clr_country_flag = EAI_democratic_focus
					clr_country_flag = EAI_fascist_focus
					clr_country_flag = EAI_communist_focus
					clr_country_flag = EAI_neutral_focus

					remove_ideas_with_trait = communist_revolutionary
					remove_ideas_with_trait = ambitious_union_boss
					remove_ideas_with_trait = fascist_demagogue
					remove_ideas_with_trait = syncretic_revanchist
					remove_ideas_with_trait = staunch_monarchist
					remove_ideas_with_trait = colonial_communist
					remove_ideas_with_trait = social_reformer
					remove_ideas_with_trait = liberal_journalist
					remove_ideas_with_trait = ambitious_union_boss
					remove_ideas_with_trait = socialist_novelist
					remove_ideas_with_trait = anti_communist_crusader
					remove_ideas_with_trait = monarchist_media_mogul
					remove_ideas_with_trait = royalist_bulldog
					remove_ideas_with_trait = shadow_of_calles

					if = { limit = { FROM = { EAI_democratic_nation = yes } } set_country_flag = EAI_democratic_focus }
					else_if = { limit = { FROM = { EAI_fascist_nation = yes } } set_country_flag = EAI_fascist_focus }
					else_if = { limit = { FROM = { EAI_communist_nation = yes } } set_country_flag = EAI_communist_focus }
					else_if = { limit = { FROM = { EAI_nonaligned_nation = yes } } set_country_flag = EAI_neutral_focus }
				}
			}
		}
	}
#	on_annex = {
#		effect = {
#
#			# remove all projects by the annexed country
#			if = { limit = { check_variable = { EAI_PC_active_projects > 0 } }
#
#				for_each_loop = { array = EAI_PC_project_array
#
#					if = { limit = { check_variable = { v < 0 } }
#
#						set_variable = { EAI_PC_project = i }
#						EAI_PC_end_project = yes
#					}
#				}
#			}
#		}
#	}
	on_declare_war = {
		effect = {

			# force update scipted AI
			if = { limit = { FROM = { is_ai = yes } }
				hidden_effect = {
					FROM = { country_event = { id = EAI_background.0 hours = 1 } }
				}
			}
			if = { limit = { is_ai = yes }
				hidden_effect = {
					country_event = { id = EAI_background.0 hours = 1 }
				}
			}

			# barbarossa
			if = {
				limit = {
					is_ai = yes
					is_in_faction_with = GER
					is_neighbor_of = SOV
					FROM = { tag = SOV }
				}

				hidden_effect = {
					# set_country_flag = { flag = EAI_barbarossa_blitz value = 1 days = 30 }

					SOV = { set_country_flag = { flag = EAI_barbarossa_defensive value = 1 days = 270 } }
				}
			}
		}
	}
	on_nuke_drop = {
		effect = {
			if = { limit = { has_country_flag = EAI_logging } log = "[Root.GetName] nuked [From.GetName]" }
		}
	}
	on_state_control_changed = { #ROOT is new controller #FROM is old controller #FROM.FROM is state ID
		effect = {

			FROM.FROM = {

				if = { limit = { check_variable = { EAI_PC_projects_in_state^num > 0 } }

					for_each_scope_loop = { array = EAI_PC_projects_in_state

						### remove any invalid projects from state

						if = {
							limit = {
								NOT = {
									is_in_array = { array = EAI_PC_construction_permissions value = ROOT.id }
									tag = ROOT
									is_in_faction_with = ROOT
									is_subject_of = ROOT
									ROOT = { is_subject_of = PREV }
								}
							}

							add_to_array = { PREV.EAI_PC_remove_projects = THIS.id }
						}

						### update project target country

						else = {

							meta_effect = { # remove target decision from old controller
								text = { var:EAI_PC_project_target_country^PREV.EAI_PC_project_target_state_@THIS = { remove_targeted_decision = { target = PREV decision = EAI_PC_project_[x]_target_decision } } }
								x = "[?PREV.EAI_PC_project_target_state_@THIS]"
							}

							set_variable = { EAI_PC_project_target_country^PREV.EAI_PC_project_target_state_@THIS = ROOT.id }
						}
					}

					for_each_scope_loop = { array = EAI_PC_remove_projects

						set_variable = { EAI_PC_project = PREV.EAI_PC_project_target_state_@THIS }
						log = "AC - [GetDate] [This.GetTag] - on_state_control_changed - deleted invalid project [?EAI_PC_project] in [?EAI_PC_project_array^EAI_PC_project] [?EAI_PC_project_array^EAI_PC_project.GetName]"
						EAI_PC_end_project = yes
					}

					clear_array = EAI_PC_remove_projects
				}
			}
		}
	}
	on_startup = {
		effect = {
			if = {
				limit = {
					is_historical_focus_on = yes
					POR = {
						is_ai = yes
					}
				}
				POR = {
					set_rule = { can_not_declare_war = yes }
				}
			}		
		}
	}
}