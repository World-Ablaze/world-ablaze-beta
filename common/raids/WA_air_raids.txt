types = {
	oil_field_raid = {
		days_to_prepare = 90

		ai_will_do = {
			base = 0
			# base = 1
			# modifier = {
			# 	# Don't target anyone who is not a potential enemy
			# 	factor = 0
			# 	NOT = {
			# 		is_in_array = {
			# 			array = potential_and_current_enemies
			# 			value = FROM  # Target country
			# 		}
			# 	}
			# }
			# modifier = {
			# 	# Don't target anyone who is not a potential enemy
			# 	factor = 0.25
			# 	NOT = {
			# 		has_war_with = FROM
			# 	}
			# }
			# modifier = {
			# 	factor = 3 # Historical
			# 	original_tag = ENG
			# 	has_war_with = GER
			# 	FROM = {
			# 		original_tag = ROM
			# 		is_in_faction_with = GER
			# 	}
			# }
		}

		category = air_raids

		command_power = 5 # command power allocation cost

		allowed = {
		}
		# Raid Type is visible
		visible = {
		}
		# Specific Target is visible
		show_target = {
			has_war_with = FROM
		}

		# Can prepare
		available = {
		}

		# Can launch a raid
		launchable = {
			has_war_with = FROM
		}

		target_type = {
			state = {
				# Resouce amount needed to be eligible as raid target
				oil > 19
				# If the site has been hit recently you can't target it again
				NOT = {
					OR = {
						has_dynamic_modifier = {
							modifier = oil_fields_lightly_damaged_modifier
						}
						has_dynamic_modifier = {
							modifier = oil_fields_damaged_modifier
						}
						has_dynamic_modifier = {
							modifier = oil_fields_critically_damaged_modifier
						}
					}
				}
			}
		}
		target_icon = GFX_oilfield_target_icon
		target_loc_key = raid_target_name_oil_field
		arrow = {
			type = air
		}
		unit_model = {
			type = equipment
		}
		launch_sound = raid_launch_air

		unit_requirements = {
			equipment = {
				type = { medium_plane_airframe large_plane_airframe }
				modules = {
					bomb_920kg_bomb_bay
					bomb_1000kg_bomb_bay
					bomb_1380kg_bomb_bay
					bomb_1400kg_bomb_bay
					bomb_1500kg_bomb_bay
					bomb_1840kg_bomb_bay
					bomb_2000kg_bomb_bay
					bomb_2300kg_bomb_bay
					bomb_2500kg_bomb_bay
					bomb_2760kg_bomb_bay
					bomb_3000kg_bomb_bay
					bomb_3220kg_bomb_bay
					bomb_3680kg_bomb_bay
					bomb_4600kg_bomb_bay
					bomb_5000kg_bomb_bay
					bomb_5520kg_bomb_bay
					bomb_8000kg_bomb_bay
					bomb_8280kg_bomb_bay
					bomb_9200kg_bomb_bay
				}
				amount = { min = 100 }
			}
		}

		starting_point = {
			types = { air_base }
		}

		success_factors = {
			success = {
				base = 0.5

				# Raiding unit modifiers
				experience = {
					reference = 1.0
					weight = 0.1
					start_weight = -0.1
				}
				# air_agility = {
				# 	reference = 100.0 # As air unit agility approaches 100 (as defined by the value above), increase chance by this value
				# 	weight = 0.1 # At 0 agility, the modifier will have negative effect.
				# 	start_weight = -0.1 # The modifier will scale linearly, meaning at 50 agility, the modifier will be 0.
				# }
				reliability = {
					reference = 1
					weight = 0.1
					start_weight = -0.1
				}
				air_defence = {
					reference = 100
					weight = 0.05
					start_weight = -0.05
				}
				strategic_bomber = {
					reference = 75
					weight = 0.2
					start_weight = -0.2
				}

				## Actor Modifiers
				air_superiority = {
					reference = 1
					start_reference = 0.5
					weight = 0.25
					start_weight = -0.25
				}

				### Target Modifiers
				anti_air = {
					reference = 10
					weight = -0.5
				}
				interception = {
					reference = 500 # More than 500 fighters won't really make any difference
					weight = -0.25
				}
				radar = {
					weight = -0.05
				}
				intel = {
					weight = 0.3
					start_weight = -0.1
					reference = 100
				}
			}

			critical = {
				base = 0.10
			}
		}

		success_levels = {
			failure = {
				victim_effects = {
				}
				actor_effects = {
					# Damage to raiding units
					raid_damage_units = {
						plane_loss = 0.9
						ratio = yes
					}
					raid_add_unit_experience = 0.05
					var:actor_country = {
						add_fuel = -5000
					}
				}
				visual_effect = {
					entity = "nuke_entity"
					animation = "attack"
				}
				visual_effect = {
					entity = "raid_failed_entity"
					animation = "attack"
				}
			}
			limited_success = {
				victim_effects = {
					# Damage to Target
					var:target_state = {
						add_dynamic_modifier = {
							modifier = oil_fields_lightly_damaged_modifier
							days = 90
						}
					}
				}
				actor_effects = {
					# Damage to raiding units
					raid_damage_units = {
						plane_loss = 0.5
						ratio = yes
					}

					# XP etc
					raid_add_unit_experience = 0.1
					var:actor_country = {
						add_fuel = -5000
					}
				}
				visual_effect = {
					entity = "air_raids_2_limited_success_entity"
					animation = "attack"
				}
			}
			success = {
				victim_effects = {
					# Damage to Target
					var:target_state = {
						add_dynamic_modifier = {
							modifier = oil_fields_damaged_modifier
							days = 120
						}
					}
				}
				actor_effects = {
					# Damage to raiding units
					raid_damage_units = {
						plane_loss = 0.25
						ratio = yes
					}

					# XP etc
					raid_add_unit_experience = 0.2

					var:actor_country = {
						air_experience = 5
						add_fuel = -5000
					}
				}
				visual_effect = {
					entity = "air_raids_2_success_entity"
					animation = "attack"
				}
			}
			critical_success = {
				victim_effects = {
					# Damage to Target
					var:target_state = {
						add_dynamic_modifier = {
							modifier = oil_fields_critically_damaged_modifier
							days = 180
						}
					}
				}
				actor_effects = {
					# Damage to raiding units
					raid_damage_units = {
						plane_loss = 0.1
						ratio = yes
					}

					# XP etc
					raid_add_unit_experience = 0.35

					var:actor_country = {
						air_experience = 10
						add_fuel = -5000
					}
				}
				visual_effect = {
					entity = "air_raids_2_critical_success_entity"
					animation = "attack"
				}
			}
		}
	}
	synthetic_refinery_raid = {
		days_to_prepare = 90

		ai_will_do = {
			base = 0
			# base = 1
			# modifier = {
			# 	# Don't target anyone who is not a potential enemy
			# 	factor = 0
			# 	NOT = {
			# 		is_in_array = {
			# 			array = potential_and_current_enemies
			# 			value = FROM  # Target country
			# 		}
			# 	}
			# }
			# modifier = {
			# 	# Don't target anyone who is not a potential enemy
			# 	factor = 0.25
			# 	NOT = {
			# 		has_war_with = FROM
			# 	}
			# }
			# modifier = {
			# 	factor = 3 # Historical
			# 	original_tag = ENG
			# 	has_war_with = GER
			# 	FROM = {
			# 		original_tag = ROM
			# 		is_in_faction_with = GER
			# 	}
			# }
		}

		category = air_raids

		command_power = 5 # command power allocation cost

		allowed = {
			always = yes
		}
		# Raid Type is visible
		visible = {
			always = yes
		}
		# Specific Target is visible
		show_target = {
			has_war_with = FROM
		}

		# Can prepare
		available = {

		}

		# Can launch a raid
		launchable = {
			has_war_with = FROM
		}

		target_type = {
			state = {
				synthetic_refinery > 3
			}
		}
		target_icon = GFX_synthetic_refinery_target_icon
		target_loc_key = raid_target_name_synthetic_refinery
		arrow = {
			type = air
		}
		unit_model = {
			type = equipment
		}
		launch_sound = raid_launch_air

		unit_requirements = {
			equipment = {
				type = { medium_plane_airframe large_plane_airframe }
				modules = {
					bomb_920kg_bomb_bay
					bomb_1000kg_bomb_bay
					bomb_1380kg_bomb_bay
					bomb_1400kg_bomb_bay
					bomb_1500kg_bomb_bay
					bomb_1840kg_bomb_bay
					bomb_2000kg_bomb_bay
					bomb_2300kg_bomb_bay
					bomb_2500kg_bomb_bay
					bomb_2760kg_bomb_bay
					bomb_3000kg_bomb_bay
					bomb_3220kg_bomb_bay
					bomb_3680kg_bomb_bay
					bomb_4600kg_bomb_bay
					bomb_5000kg_bomb_bay
					bomb_5520kg_bomb_bay
					bomb_8000kg_bomb_bay
					bomb_8280kg_bomb_bay
					bomb_9200kg_bomb_bay
				}
				amount = { min = 100 }
			}
		}

		starting_point = {
			types = { air_base }
		}

		success_factors = {
			success = {
				base = 0.5

				# Raiding unit modifiers
				experience = {
					reference = 1.0
					weight = 0.1
					start_weight = -0.1
				}
				# air_agility = {
				# 	reference = 100.0 # As air unit agility approaches 100 (as defined by the value above), increase chance by this value
				# 	weight = 0.1 # At 0 agility, the modifier will have negative effect.
				# 	start_weight = -0.1 # The modifier will scale linearly, meaning at 50 agility, the modifier will be 0.
				# }
				reliability = {
					reference = 1
					weight = 0.1
					start_weight = -0.1
				}
				air_defence = {
					reference = 100
					weight = 0.05
					start_weight = -0.05
				}
				strategic_bomber = {
					reference = 75
					weight = 0.2
					start_weight = -0.2
				}

				## Actor Modifiers
				air_superiority = {
					reference = 1
					start_reference = 0.5
					weight = 0.25
					start_weight = -0.25
				}

				### Target Modifiers
				anti_air = {
					reference = 10
					weight = -0.5
				}
				interception = {
					reference = 500 # More than 500 fighters won't really make any difference
					weight = -0.25
				}
				radar = {
					weight = -0.05
				}
				intel = {
					weight = 0.3
					start_weight = -0.1
					reference = 100
				}
			}

			critical = {
				base = 0.10
			}
		}

		success_levels = {
			failure = {
				victim_effects = {
				}
				actor_effects = {
					# Damage to raiding units
					raid_damage_units = {
						plane_loss = 0.9
						ratio = yes
					}
					raid_add_unit_experience = 0.05
					var:actor_country = {
						add_fuel = -5000
					}
				}
				visual_effect = {
					entity = "nuke_entity"
					animation = "attack"
				}
				visual_effect = {
					entity = "raid_failed_entity"
					animation = "attack"
				}
			}
			limited_success = {
				victim_effects = {
					# Damage to Target
					var:target_state = {
						set_temp_variable = { tmp_damage_building = building_level@synthetic_refinery } # Get how many buildings in the state
						multiply_temp_variable = { tmp_damage_building = 0.25 } # Multiply by ratio of how many destroyed (e.g. 25% destroyed)
						round_temp_variable = tmp_damage_building # Round to nearest integer to display number of buildings destroyed to player
						custom_override_tooltip = {
							tooltip = {
								localization_key = raid_damage_buildings_tt
								building = synthetic_refinery
								num = [?tmp_damage_building]
							}
							meta_effect = {
								text = {
									damage_building = {
										type = synthetic_refinery
										damage = [BUILDING_DAMAGE]
									}
								}
								BUILDING_DAMAGE = "[?tmp_damage_building]"
							}
						}
					}
				}
				actor_effects = {
					# Damage to raiding units
					raid_damage_units = {
						plane_loss = 0.5
						ratio = yes
					}

					# XP etc
					raid_add_unit_experience = 0.1
					var:actor_country = {
						add_fuel = -5000
					}
				}
				visual_effect = {
					entity = "air_raids_2_limited_success_entity"
					animation = "attack"
				}
			}
			success = {
				victim_effects = {
					# Damage to Target
					var:target_state = {
						set_temp_variable = { tmp_damage_building = building_level@synthetic_refinery } # Get how many buildings in the state
						multiply_temp_variable = { tmp_damage_building = 0.5 } # Multiply by ratio of how many destroyed (e.g. 25% destroyed)
						round_temp_variable = tmp_damage_building # Round to nearest integer to display number of buildings destroyed to player
						custom_override_tooltip = {
							tooltip = {
								localization_key = raid_damage_buildings_tt
								building = synthetic_refinery
								num = [?tmp_damage_building]
							}
							meta_effect = {
								text = {
									damage_building = {
										type = synthetic_refinery
										damage = [BUILDING_DAMAGE]
									}
								}
								BUILDING_DAMAGE = "[?tmp_damage_building]"
							}
						}
					}
				}
				actor_effects = {
					# Damage to raiding units
					raid_damage_units = {
						plane_loss = 0.25
						ratio = yes
					}

					# XP etc
					raid_add_unit_experience = 0.2

					var:actor_country = {
						air_experience = 5
						add_fuel = -5000
					}
				}
				visual_effect = {
					entity = "air_raids_2_success_entity"
					animation = "attack"
				}
			}
			critical_success = {
				victim_effects = {
					# Damage to Target
					var:target_state = {
						set_temp_variable = { tmp_damage_building = building_level@synthetic_refinery } # Get how many buildings in the state
						multiply_temp_variable = { tmp_damage_building = 0.75 } # Multiply by ratio of how many destroyed (e.g. 25% destroyed)
						round_temp_variable = tmp_damage_building # Round to nearest integer to display number of buildings destroyed to player
						custom_override_tooltip = {
							tooltip = {
								localization_key = raid_damage_buildings_tt
								building = synthetic_refinery
								num = [?tmp_damage_building]
							}
							meta_effect = {
								text = {
									damage_building = {
										type = synthetic_refinery
										damage = [BUILDING_DAMAGE]
									}
								}
								BUILDING_DAMAGE = "[?tmp_damage_building]"
							}
						}
					}
				}
				actor_effects = {
					# Damage to raiding units
					raid_damage_units = {
						plane_loss = 0.1
						ratio = yes
					}

					# XP etc
					raid_add_unit_experience = 0.35

					var:actor_country = {
						air_experience = 10
						add_fuel = -5000
					}
				}
				visual_effect = {
					entity = "air_raids_2_critical_success_entity"
					animation = "attack"
				}
			}
		}
	}
	steel_refinery_raid = {
		days_to_prepare = 90

		ai_will_do = {
			base = 0
			# base = 1
			# modifier = {
			# 	# Don't target anyone who is not a potential enemy
			# 	factor = 0
			# 	NOT = {
			# 		is_in_array = {
			# 			array = potential_and_current_enemies
			# 			value = FROM  # Target country
			# 		}
			# 	}
			# }
			# modifier = {
			# 	# Don't target anyone who is not a potential enemy
			# 	factor = 0.25
			# 	NOT = {
			# 		has_war_with = FROM
			# 	}
			# }
			# modifier = {
			# 	factor = 3 # Historical
			# 	original_tag = ENG
			# 	has_war_with = GER
			# 	FROM = {
			# 		original_tag = ROM
			# 		is_in_faction_with = GER
			# 	}
			# }
		}

		category = air_raids

		command_power = 5 # command power allocation cost

		allowed = {
			always = yes
		}
		# Raid Type is visible
		visible = {
			always = yes
		}
		# Specific Target is visible
		show_target = {
			has_war_with = FROM
		}

		# Can prepare
		available = {

		}

		# Can launch a raid
		launchable = {
			has_war_with = FROM
		}

		target_type = {
			state = {
				set_temp_variable = { tmp_num_total_mills = building_level@steel_refinery}
				add_to_temp_variable = { tmp_num_total_mills = building_level@hydro_steel_refinery}
				check_variable = { tmp_num_total_mills > 3 }
			}
		}
		target_icon = GFX_steel_refinery_target_icon
		target_loc_key = raid_target_name_steel_refinery
		arrow = {
			type = air
		}
		unit_model = {
			type = equipment
		}
		launch_sound = raid_launch_air

		unit_requirements = {
			equipment = {
				type = { medium_plane_airframe large_plane_airframe }
				modules = {
					bomb_920kg_bomb_bay
					bomb_1000kg_bomb_bay
					bomb_1380kg_bomb_bay
					bomb_1400kg_bomb_bay
					bomb_1500kg_bomb_bay
					bomb_1840kg_bomb_bay
					bomb_2000kg_bomb_bay
					bomb_2300kg_bomb_bay
					bomb_2500kg_bomb_bay
					bomb_2760kg_bomb_bay
					bomb_3000kg_bomb_bay
					bomb_3220kg_bomb_bay
					bomb_3680kg_bomb_bay
					bomb_4600kg_bomb_bay
					bomb_5000kg_bomb_bay
					bomb_5520kg_bomb_bay
					bomb_8000kg_bomb_bay
					bomb_8280kg_bomb_bay
					bomb_9200kg_bomb_bay
				}
				amount = { min = 100 }
			}
		}

		starting_point = {
			types = { air_base }
		}

		success_factors = {
			success = {
				base = 0.5

				# Raiding unit modifiers
				experience = {
					reference = 1.0
					weight = 0.1
					start_weight = -0.1
				}
				# air_agility = {
				# 	reference = 100.0 # As air unit agility approaches 100 (as defined by the value above), increase chance by this value
				# 	weight = 0.1 # At 0 agility, the modifier will have negative effect.
				# 	start_weight = -0.1 # The modifier will scale linearly, meaning at 50 agility, the modifier will be 0.
				# }
				reliability = {
					reference = 1
					weight = 0.1
					start_weight = -0.1
				}
				air_defence = {
					reference = 100
					weight = 0.05
					start_weight = -0.05
				}
				strategic_bomber = {
					reference = 75
					weight = 0.2
					start_weight = -0.2
				}

				## Actor Modifiers
				air_superiority = {
					reference = 1
					start_reference = 0.5
					weight = 0.25
					start_weight = -0.25
				}

				### Target Modifiers
				anti_air = {
					reference = 10
					weight = -0.5
				}
				interception = {
					reference = 500 # More than 500 fighters won't really make any difference
					weight = -0.25
				}
				radar = {
					weight = -0.05
				}
				intel = {
					weight = 0.3
					start_weight = -0.1
					reference = 100
				}
			}

			critical = {
				base = 0.10
			}
		}

		success_levels = {
			failure = {
				victim_effects = {
				}
				actor_effects = {
					# Damage to raiding units
					raid_damage_units = {
						plane_loss = 0.9
						ratio = yes
					}
					raid_add_unit_experience = 0.05
					var:actor_country = {
						add_fuel = -5000
					}
				}
				visual_effect = {
					entity = "nuke_entity"
					animation = "attack"
				}
				visual_effect = {
					entity = "raid_failed_entity"
					animation = "attack"
				}
			}
			limited_success = {
				victim_effects = {
					# Damage to Target
					var:target_state = {
						set_temp_variable = { tmp_damage_building = building_level@steel_refinery } # Get how many buildings in the state
						if = {
							limit = {
								check_variable = { tmp_damage_building > 0 }
							}
							multiply_temp_variable = { tmp_damage_building = 0.25 } # Multiply by ratio of how many destroyed (e.g. 25% destroyed)
							round_temp_variable = tmp_damage_building # Round to nearest integer to display number of buildings destroyed to player
							custom_override_tooltip = {
								tooltip = {
									localization_key = raid_damage_buildings_tt
									building = steel_refinery
									num = [?tmp_damage_building]
								}
								meta_effect = {
									text = {
										damage_building = {
											type = steel_refinery
											damage = [BUILDING_DAMAGE]
										}
									}
									BUILDING_DAMAGE = "[?tmp_damage_building]"
								}
							}
							log = "Steel limited success: Mill: temp_damage_building: [?tmp_damage_building]."
						}
						set_temp_variable = { tmp_damage_building_hydro = building_level@hydro_steel_refinery } # Get how many buildings in the state
						if = {
							limit = {
								check_variable = { tmp_damage_building_hydro > 0 }
							}
							multiply_temp_variable = { tmp_damage_building_hydro = 0.25 } # Multiply by ratio of how many destroyed (e.g. 25% destroyed)
							round_temp_variable = tmp_damage_building_hydro # Round to nearest integer to display number of buildings destroyed to player
							custom_override_tooltip = {
								tooltip = {
									localization_key = raid_damage_buildings_tt
									building = hydro_steel_refinery
									num = [?tmp_damage_building_hydro]
								}
								meta_effect = {
									text = {
										damage_building = {
											type = hydro_steel_refinery
											damage = [BUILDING_DAMAGE]
										}
									}
									BUILDING_DAMAGE = "[?tmp_damage_building_hydro]"
								}
							}
							log = "Steel limited success: Hydro: temp_damage_building: [?tmp_damage_building_hydro]."
						}
					}
				}
				actor_effects = {
					# Damage to raiding units
					raid_damage_units = {
						plane_loss = 0.5
						ratio = yes
					}

					# XP etc
					raid_add_unit_experience = 0.1
					var:actor_country = {
						add_fuel = -5000
					}
				}
				visual_effect = {
					entity = "air_raids_2_limited_success_entity"
					animation = "attack"
				}
			}
			success = {
				victim_effects = {
					# Damage to Target
					var:target_state = {
						set_temp_variable = { tmp_damage_building = building_level@steel_refinery } # Get how many buildings in the state
						if = {
							limit = {
								check_variable = { tmp_damage_building > 0 }
							}
							multiply_temp_variable = { tmp_damage_building = 0.5 } # Multiply by ratio of how many destroyed (e.g. 25% destroyed)
							round_temp_variable = tmp_damage_building # Round to nearest integer to display number of buildings destroyed to player
							log = "Steel success: Mill: temp_damage_building: [?tmp_damage_building]."
							custom_override_tooltip = {
								tooltip = {
									localization_key = raid_damage_buildings_tt
									building = steel_refinery
									num = [?tmp_damage_building]
								}
								meta_effect = {
									text = {
										damage_building = {
											type = steel_refinery
											damage = [BUILDING_DAMAGE]
										}
									}
									BUILDING_DAMAGE = "[?tmp_damage_building]"
								}
							}
						}
						set_temp_variable = { tmp_damage_building_hydro = building_level@hydro_steel_refinery } # Get how many buildings in the state
						if = {
							limit = {
								check_variable = { tmp_damage_building_hydro > 0 }
							}
							multiply_temp_variable = { tmp_damage_building_hydro = 0.5 } # Multiply by ratio of how many destroyed (e.g. 25% destroyed)
							round_temp_variable = tmp_damage_building_hydro # Round to nearest integer to display number of buildings destroyed to player
							log = "Steel success: Hydro: tmp_damage_building_hydro: [?tmp_damage_building_hydro]."
							custom_override_tooltip = {
								tooltip = {
									localization_key = raid_damage_buildings_tt
									building = hydro_steel_refinery
									num = [?tmp_damage_building_hydro]
								}
								meta_effect = {
									text = {
										damage_building = {
											type = hydro_steel_refinery
											damage = [BUILDING_DAMAGE]
										}
									}
									BUILDING_DAMAGE = "[?tmp_damage_building_hydro]"
								}
							}
						}
					}
				}
				actor_effects = {
					# Damage to raiding units
					raid_damage_units = {
						plane_loss = 0.25
						ratio = yes
					}

					# XP etc
					raid_add_unit_experience = 0.2

					var:actor_country = {
						air_experience = 5
						add_fuel = -5000
					}
				}
				visual_effect = {
					entity = "air_raids_2_success_entity"
					animation = "attack"
				}
			}
			critical_success = {
				victim_effects = {
					# Damage to Target
					var:target_state = {
						set_temp_variable = { tmp_damage_building = building_level@steel_refinery } # Get how many buildings in the state
						if = {
							limit = {
								check_variable = { tmp_damage_building_hydro > 0 }
							}
							multiply_temp_variable = { tmp_damage_building = 0.75 } # Multiply by ratio of how many destroyed (e.g. 25% destroyed)
							round_temp_variable = tmp_damage_building # Round to nearest integer to display number of buildings destroyed to player
							custom_override_tooltip = {
								tooltip = {
									localization_key = raid_damage_buildings_tt
									building = steel_refinery
									num = [?tmp_damage_building]
								}
								meta_effect = {
									text = {
										damage_building = {
											type = steel_refinery
											damage = [BUILDING_DAMAGE]
										}
									}
									BUILDING_DAMAGE = "[?tmp_damage_building]"
								}
							}
							log = "Steel critical success: Mill: temp_damage_building: [?tmp_damage_building]."
						}
						set_temp_variable = { tmp_damage_building_hydro = building_level@hydro_steel_refinery } # Get how many buildings in the state
						if = {
							limit = {
								check_variable = { tmp_damage_building_hydro > 0 }
							}
							multiply_temp_variable = { tmp_damage_building_hydro = 0.75 } # Multiply by ratio of how many destroyed (e.g. 25% destroyed)
							round_temp_variable = tmp_damage_building_hydro # Round to nearest integer to display number of buildings destroyed to player
							custom_override_tooltip = {
								tooltip = {
									localization_key = raid_damage_buildings_tt
									building = hydro_steel_refinery
									num = [?tmp_damage_building_hydro]
								}
								meta_effect = {
									text = {
										damage_building = {
											type = hydro_steel_refinery
											damage = [BUILDING_DAMAGE]
										}
									}
									BUILDING_DAMAGE = "[?tmp_damage_building_hydro]"
								}
							}
							log = "Steel critical success: Hydro: temp_damage_building: [?tmp_damage_building_hydro]."
						}
					}
				}
				actor_effects = {
					# Damage to raiding units
					raid_damage_units = {
						plane_loss = 0.1
						ratio = yes
					}

					# XP etc
					raid_add_unit_experience = 0.35

					var:actor_country = {
						air_experience = 10
						add_fuel = -5000
					}
				}
				visual_effect = {
					entity = "air_raids_2_critical_success_entity"
					animation = "attack"
				}
			}
		}
	}
	aluminium_refinery_raid = {
		days_to_prepare = 90

		ai_will_do = {
			base = 0
			# base = 1
			# modifier = {
			# 	# Don't target anyone who is not a potential enemy
			# 	factor = 0
			# 	NOT = {
			# 		is_in_array = {
			# 			array = potential_and_current_enemies
			# 			value = FROM  # Target country
			# 		}
			# 	}
			# }
			# modifier = {
			# 	# Don't target anyone who is not a potential enemy
			# 	factor = 0.25
			# 	NOT = {
			# 		has_war_with = FROM
			# 	}
			# }
			# modifier = {
			# 	factor = 3 # Historical
			# 	original_tag = ENG
			# 	has_war_with = GER
			# 	FROM = {
			# 		original_tag = ROM
			# 		is_in_faction_with = GER
			# 	}
			# }
		}

		category = air_raids

		command_power = 5 # command power allocation cost

		allowed = {
			always = yes
		}
		# Raid Type is visible
		visible = {
			always = yes
		}
		# Specific Target is visible
		show_target = {
			has_war_with = FROM
		}

		# Can prepare
		available = {

		}

		# Can launch a raid
		launchable = {
			has_war_with = FROM
		}

		target_type = {
			state = {
				set_temp_variable = { tmp_num_total_mills = building_level@aluminium_refinery}
				add_to_temp_variable = { tmp_num_total_mills = building_level@hydro_aluminium_refinery}
				check_variable = { tmp_num_total_mills > 3 }
			}
		}
		target_icon = GFX_aluminium_refinery_target_icon
		target_loc_key = raid_target_name_aluminium_refinery
		arrow = {
			type = air
		}
		unit_model = {
			type = equipment
		}
		launch_sound = raid_launch_air

		unit_requirements = {
			equipment = {
				type = { medium_plane_airframe large_plane_airframe }
				modules = {
					bomb_920kg_bomb_bay
					bomb_1000kg_bomb_bay
					bomb_1380kg_bomb_bay
					bomb_1400kg_bomb_bay
					bomb_1500kg_bomb_bay
					bomb_1840kg_bomb_bay
					bomb_2000kg_bomb_bay
					bomb_2300kg_bomb_bay
					bomb_2500kg_bomb_bay
					bomb_2760kg_bomb_bay
					bomb_3000kg_bomb_bay
					bomb_3220kg_bomb_bay
					bomb_3680kg_bomb_bay
					bomb_4600kg_bomb_bay
					bomb_5000kg_bomb_bay
					bomb_5520kg_bomb_bay
					bomb_8000kg_bomb_bay
					bomb_8280kg_bomb_bay
					bomb_9200kg_bomb_bay
				}
				amount = { min = 100 }
			}
		}

		starting_point = {
			types = { air_base }
		}

		success_factors = {
			success = {
				base = 0.5

				# Raiding unit modifiers
				experience = {
					reference = 1.0
					weight = 0.1
					start_weight = -0.1
				}
				# air_agility = {
				# 	reference = 100.0 # As air unit agility approaches 100 (as defined by the value above), increase chance by this value
				# 	weight = 0.1 # At 0 agility, the modifier will have negative effect.
				# 	start_weight = -0.1 # The modifier will scale linearly, meaning at 50 agility, the modifier will be 0.
				# }
				reliability = {
					reference = 1
					weight = 0.1
					start_weight = -0.1
				}
				air_defence = {
					reference = 100
					weight = 0.05
					start_weight = -0.05
				}
				strategic_bomber = {
					reference = 75
					weight = 0.2
					start_weight = -0.2
				}

				## Actor Modifiers
				air_superiority = {
					reference = 1
					start_reference = 0.5
					weight = 0.25
					start_weight = -0.25
				}

				### Target Modifiers
				anti_air = {
					reference = 10
					weight = -0.5
				}
				interception = {
					reference = 500 # More than 500 fighters won't really make any difference
					weight = -0.25
				}
				radar = {
					weight = -0.05
				}
				intel = {
					weight = 0.3
					start_weight = -0.1
					reference = 100
				}
			}

			critical = {
				base = 0.10
			}
		}

		success_levels = {
			failure = {
				victim_effects = {
				}
				actor_effects = {
					# Damage to raiding units
					raid_damage_units = {
						plane_loss = 0.9
						ratio = yes
					}
					raid_add_unit_experience = 0.05
					var:actor_country = {
						add_fuel = -5000
					}
				}
				visual_effect = {
					entity = "nuke_entity"
					animation = "attack"
				}
				visual_effect = {
					entity = "raid_failed_entity"
					animation = "attack"
				}
			}
			limited_success = {
				victim_effects = {
					# Damage to Target
					var:target_state = {
						set_temp_variable = { tmp_damage_building = building_level@aluminium_refinery } # Get how many buildings in the state
						multiply_temp_variable = { tmp_damage_building = 0.25 } # Multiply by ratio of how many destroyed (e.g. 25% destroyed)
						round_temp_variable = tmp_damage_building # Round to nearest integer to display number of buildings destroyed to player
						custom_override_tooltip = {
							tooltip = {
								localization_key = raid_damage_buildings_tt
								building = aluminium_refinery
								num = [?tmp_damage_building]
							}
							meta_effect = {
								text = {
									damage_building = {
										type = aluminium_refinery
										damage = [BUILDING_DAMAGE]
									}
								}
								BUILDING_DAMAGE = "[?tmp_damage_building]"
							}
						}
						set_temp_variable = { tmp_damage_building_hydro = building_level@hydro_aluminium_refinery } # Get how many buildings in the state
						multiply_temp_variable = { tmp_damage_building_hydro = 0.25 } # Multiply by ratio of how many destroyed (e.g. 25% destroyed)
						round_temp_variable = tmp_damage_building_hydro # Round to nearest integer to display number of buildings destroyed to player
						custom_override_tooltip = {
							tooltip = {
								localization_key = raid_damage_buildings_tt
								building = hydro_aluminium_refinery
								num = [?tmp_damage_building_hydro]
							}
							meta_effect = {
								text = {
									damage_building = {
										type = hydro_aluminium_refinery
										damage = [BUILDING_DAMAGE]
									}
								}
								BUILDING_DAMAGE = "[?tmp_damage_building_hydro]"
							}
						}
					}
				}
				actor_effects = {
					# Damage to raiding units
					raid_damage_units = {
						plane_loss = 0.5
						ratio = yes
					}

					# XP etc
					raid_add_unit_experience = 0.1
					var:actor_country = {
						add_fuel = -5000
					}
				}
				visual_effect = {
					entity = "air_raids_2_limited_success_entity"
					animation = "attack"
				}
			}
			success = {
				victim_effects = {
					# Damage to Target
					var:target_state = {
						set_temp_variable = { tmp_damage_building = building_level@aluminium_refinery } # Get how many buildings in the state
						multiply_temp_variable = { tmp_damage_building = 0.5 } # Multiply by ratio of how many destroyed (e.g. 25% destroyed)
						round_temp_variable = tmp_damage_building # Round to nearest integer to display number of buildings destroyed to player
						custom_override_tooltip = {
							tooltip = {
								localization_key = raid_damage_buildings_tt
								building = aluminium_refinery
								num = [?tmp_damage_building]
							}
							meta_effect = {
								text = {
									damage_building = {
										type = aluminium_refinery
										damage = [BUILDING_DAMAGE]
									}
								}
								BUILDING_DAMAGE = "[?tmp_damage_building]"
							}
						}
						set_temp_variable = { tmp_damage_building_hydro = building_level@hydro_aluminium_refinery } # Get how many buildings in the state
						multiply_temp_variable = { tmp_damage_building_hydro = 0.5 } # Multiply by ratio of how many destroyed (e.g. 25% destroyed)
						round_temp_variable = tmp_damage_building_hydro # Round to nearest integer to display number of buildings destroyed to player
						custom_override_tooltip = {
							tooltip = {
								localization_key = raid_damage_buildings_tt
								building = hydro_aluminium_refinery
								num = [?tmp_damage_building_hydro]
							}
							meta_effect = {
								text = {
									damage_building = {
										type = hydro_aluminium_refinery
										damage = [BUILDING_DAMAGE]
									}
								}
								BUILDING_DAMAGE = "[?tmp_damage_building_hydro]"
							}
						}
					}
				}
				actor_effects = {
					# Damage to raiding units
					raid_damage_units = {
						plane_loss = 0.25
						ratio = yes
					}

					# XP etc
					raid_add_unit_experience = 0.2

					var:actor_country = {
						air_experience = 5
						add_fuel = -5000
					}
				}
				visual_effect = {
					entity = "air_raids_2_success_entity"
					animation = "attack"
				}
			}
			critical_success = {
				victim_effects = {
					# Damage to Target
					var:target_state = {
						set_temp_variable = { tmp_damage_building = building_level@aluminium_refinery } # Get how many buildings in the state
						multiply_temp_variable = { tmp_damage_building = 0.75 } # Multiply by ratio of how many destroyed (e.g. 25% destroyed)
						round_temp_variable = tmp_damage_building # Round to nearest integer to display number of buildings destroyed to player
						custom_override_tooltip = {
							tooltip = {
								localization_key = raid_damage_buildings_tt
								building = aluminium_refinery
								num = [?tmp_damage_building]
							}
							meta_effect = {
								text = {
									damage_building = {
										type = aluminium_refinery
										damage = [BUILDING_DAMAGE]
									}
								}
								BUILDING_DAMAGE = "[?tmp_damage_building]"
							}
						}
						set_temp_variable = { tmp_damage_building_hydro = building_level@hydro_aluminium_refinery } # Get how many buildings in the state
						multiply_temp_variable = { tmp_damage_building_hydro = 0.75 } # Multiply by ratio of how many destroyed (e.g. 25% destroyed)
						round_temp_variable = tmp_damage_building_hydro # Round to nearest integer to display number of buildings destroyed to player
						custom_override_tooltip = {
							tooltip = {
								localization_key = raid_damage_buildings_tt
								building = hydro_aluminium_refinery
								num = [?tmp_damage_building_hydro]
							}
							meta_effect = {
								text = {
									damage_building = {
										type = hydro_aluminium_refinery
										damage = [BUILDING_DAMAGE]
									}
								}
								BUILDING_DAMAGE = "[?tmp_damage_building_hydro]"
							}
						}
					}
				}
				actor_effects = {
					# Damage to raiding units
					raid_damage_units = {
						plane_loss = 0.1
						ratio = yes
					}

					# XP etc
					raid_add_unit_experience = 0.35

					var:actor_country = {
						air_experience = 10
						add_fuel = -5000
					}
				}
				visual_effect = {
					entity = "air_raids_2_critical_success_entity"
					animation = "attack"
				}
			}
		}
	}
	arms_factory_raid = {
		days_to_prepare = 90

		ai_will_do = {
			base = 0
			# base = 1
			# modifier = {
			# 	# Don't target anyone who is not a potential enemy
			# 	factor = 0
			# 	NOT = {
			# 		is_in_array = {
			# 			array = potential_and_current_enemies
			# 			value = FROM  # Target country
			# 		}
			# 	}
			# }
			# modifier = {
			# 	# Don't target anyone who is not a potential enemy
			# 	factor = 0.25
			# 	NOT = {
			# 		has_war_with = FROM
			# 	}
			# }
			# modifier = {
			# 	factor = 3 # Historical
			# 	original_tag = ENG
			# 	has_war_with = GER
			# 	FROM = {
			# 		original_tag = ROM
			# 		is_in_faction_with = GER
			# 	}
			# }
		}

		category = air_raids

		command_power = 5 # command power allocation cost

		allowed = {
			always = yes
		}
		# Raid Type is visible
		visible = {
			always = yes
		}
		# Specific Target is visible
		show_target = {
			has_war_with = FROM
		}

		# Can prepare
		available = {

		}

		# Can launch a raid
		launchable = {
			has_war_with = FROM
		}

		target_type = {
			state = {
				arms_factory > 15
			}
		}
		target_icon = GFX_arms_factory_target_icon
		target_loc_key = raid_target_name_arms_factory
		arrow = {
			type = air
		}
		unit_model = {
			type = equipment
		}
		launch_sound = raid_launch_air

		unit_requirements = {
			equipment = {
				type = { medium_plane_airframe large_plane_airframe }
				modules = {
					bomb_920kg_bomb_bay
					bomb_1000kg_bomb_bay
					bomb_1380kg_bomb_bay
					bomb_1400kg_bomb_bay
					bomb_1500kg_bomb_bay
					bomb_1840kg_bomb_bay
					bomb_2000kg_bomb_bay
					bomb_2300kg_bomb_bay
					bomb_2500kg_bomb_bay
					bomb_2760kg_bomb_bay
					bomb_3000kg_bomb_bay
					bomb_3220kg_bomb_bay
					bomb_3680kg_bomb_bay
					bomb_4600kg_bomb_bay
					bomb_5000kg_bomb_bay
					bomb_5520kg_bomb_bay
					bomb_8000kg_bomb_bay
					bomb_8280kg_bomb_bay
					bomb_9200kg_bomb_bay
				}
				amount = { min = 100 }
			}
		}

		starting_point = {
			types = { air_base }
		}

		success_factors = {
			success = {
				base = 0.5

				# Raiding unit modifiers
				experience = {
					reference = 1.0
					weight = 0.1
					start_weight = -0.1
				}
				# air_agility = {
				# 	reference = 100.0 # As air unit agility approaches 100 (as defined by the value above), increase chance by this value
				# 	weight = 0.1 # At 0 agility, the modifier will have negative effect.
				# 	start_weight = -0.1 # The modifier will scale linearly, meaning at 50 agility, the modifier will be 0.
				# }
				reliability = {
					reference = 1
					weight = 0.1
					start_weight = -0.1
				}
				air_defence = {
					reference = 100
					weight = 0.05
					start_weight = -0.05
				}
				strategic_bomber = {
					reference = 75
					weight = 0.2
					start_weight = -0.2
				}

				## Actor Modifiers
				air_superiority = {
					reference = 1
					start_reference = 0.5
					weight = 0.25
					start_weight = -0.25
				}

				### Target Modifiers
				anti_air = {
					reference = 10
					weight = -0.5
				}
				interception = {
					reference = 500 # More than 500 fighters won't really make any difference
					weight = -0.25
				}
				radar = {
					weight = -0.05
				}
				intel = {
					weight = 0.3
					start_weight = -0.1
					reference = 100
				}
			}

			critical = {
				base = 0.10
			}
		}

		success_levels = {
			failure = {
				victim_effects = {
				}
				actor_effects = {
					# Damage to raiding units
					raid_damage_units = {
						plane_loss = 0.9
						ratio = yes
					}
					raid_add_unit_experience = 0.05
					var:actor_country = {
						add_fuel = -5000
					}
				}
				visual_effect = {
					entity = "nuke_entity"
					animation = "attack"
				}
				visual_effect = {
					entity = "raid_failed_entity"
					animation = "attack"
				}
			}
			limited_success = {
				victim_effects = {
					# Damage to Target
					var:target_state = {
						set_temp_variable = { tmp_damage_building = building_level@arms_factory } # Get how many buildings in the state
						multiply_temp_variable = { tmp_damage_building = 0.25 } # Multiply by ratio of how many destroyed (e.g. 25% destroyed)
						round_temp_variable = tmp_damage_building # Round to nearest integer to display number of buildings destroyed to player
						custom_override_tooltip = {
							tooltip = {
								localization_key = raid_damage_buildings_tt
								building = arms_factory
								num = [?tmp_damage_building]
							}
							meta_effect = {
								text = {
									damage_building = {
										type = arms_factory
										damage = [BUILDING_DAMAGE]
									}
								}
								BUILDING_DAMAGE = "[?tmp_damage_building]"
							}
						}
					}
				}
				actor_effects = {
					# Damage to raiding units
					raid_damage_units = {
						plane_loss = 0.5
						ratio = yes
					}

					# XP etc
					raid_add_unit_experience = 0.1
					var:actor_country = {
						add_fuel = -5000
					}
				}
				visual_effect = {
					entity = "air_raids_2_limited_success_entity"
					animation = "attack"
				}
			}
			success = {
				victim_effects = {
					# Damage to Target
					var:target_state = {
						set_temp_variable = { tmp_damage_building = building_level@arms_factory } # Get how many buildings in the state
						multiply_temp_variable = { tmp_damage_building = 0.5 } # Multiply by ratio of how many destroyed (e.g. 25% destroyed)
						round_temp_variable = tmp_damage_building # Round to nearest integer to display number of buildings destroyed to player
						custom_override_tooltip = {
							tooltip = {
								localization_key = raid_damage_buildings_tt
								building = arms_factory
								num = [?tmp_damage_building]
							}
							meta_effect = {
								text = {
									damage_building = {
										type = arms_factory
										damage = [BUILDING_DAMAGE]
									}
								}
								BUILDING_DAMAGE = "[?tmp_damage_building]"
							}
						}
					}
				}
				actor_effects = {
					# Damage to raiding units
					raid_damage_units = {
						plane_loss = 0.25
						ratio = yes
					}

					# XP etc
					raid_add_unit_experience = 0.2

					var:actor_country = {
						air_experience = 5
						add_fuel = -5000
					}
				}
				visual_effect = {
					entity = "air_raids_2_success_entity"
					animation = "attack"
				}
			}
			critical_success = {
				victim_effects = {
					# Damage to Target
					var:target_state = {
						set_temp_variable = { tmp_damage_building = building_level@arms_factory } # Get how many buildings in the state
						multiply_temp_variable = { tmp_damage_building = 0.75 } # Multiply by ratio of how many destroyed (e.g. 25% destroyed)
						round_temp_variable = tmp_damage_building # Round to nearest integer to display number of buildings destroyed to player
						custom_override_tooltip = {
							tooltip = {
								localization_key = raid_damage_buildings_tt
								building = arms_factory
								num = [?tmp_damage_building]
							}
							meta_effect = {
								text = {
									damage_building = {
										type = arms_factory
										damage = [BUILDING_DAMAGE]
									}
								}
								BUILDING_DAMAGE = "[?tmp_damage_building]"
							}
						}
					}
				}
				actor_effects = {
					# Damage to raiding units
					raid_damage_units = {
						plane_loss = 0.1
						ratio = yes
					}

					# XP etc
					raid_add_unit_experience = 0.35

					var:actor_country = {
						air_experience = 10
						add_fuel = -5000
					}
				}
				visual_effect = {
					entity = "air_raids_2_critical_success_entity"
					animation = "attack"
				}
			}
		}
	}
	dockyard_raid = {
		days_to_prepare = 90

		ai_will_do = {
			base = 0
			# base = 1
			# modifier = {
			# 	# Don't target anyone who is not a potential enemy
			# 	factor = 0
			# 	NOT = {
			# 		is_in_array = {
			# 			array = potential_and_current_enemies
			# 			value = FROM  # Target country
			# 		}
			# 	}
			# }
			# modifier = {
			# 	# Don't target anyone who is not a potential enemy
			# 	factor = 0.25
			# 	NOT = {
			# 		has_war_with = FROM
			# 	}
			# }
			# modifier = {
			# 	factor = 3 # Historical
			# 	original_tag = ENG
			# 	has_war_with = GER
			# 	FROM = {
			# 		original_tag = ROM
			# 		is_in_faction_with = GER
			# 	}
			# }
		}

		category = air_raids

		command_power = 5 # command power allocation cost

		allowed = {
			always = yes
		}
		# Raid Type is visible
		visible = {
			always = yes
		}
		# Specific Target is visible
		show_target = {
			has_war_with = FROM
		}

		# Can prepare
		available = {

		}

		# Can launch a raid
		launchable = {
			has_war_with = FROM
		}

		target_type = {
			state = {
				dockyard > 3
			}
		}
		target_icon = GFX_dockyard_target_icon
		target_loc_key = raid_target_name_dockyard
		arrow = {
			type = air
		}
		unit_model = {
			type = equipment
		}
		launch_sound = raid_launch_air

		unit_requirements = {
			equipment = {
				type = { medium_plane_airframe large_plane_airframe }
				modules = {
					bomb_920kg_bomb_bay
					bomb_1000kg_bomb_bay
					bomb_1380kg_bomb_bay
					bomb_1400kg_bomb_bay
					bomb_1500kg_bomb_bay
					bomb_1840kg_bomb_bay
					bomb_2000kg_bomb_bay
					bomb_2300kg_bomb_bay
					bomb_2500kg_bomb_bay
					bomb_2760kg_bomb_bay
					bomb_3000kg_bomb_bay
					bomb_3220kg_bomb_bay
					bomb_3680kg_bomb_bay
					bomb_4600kg_bomb_bay
					bomb_5000kg_bomb_bay
					bomb_5520kg_bomb_bay
					bomb_8000kg_bomb_bay
					bomb_8280kg_bomb_bay
					bomb_9200kg_bomb_bay
				}
				amount = { min = 100 }
			}
		}

		starting_point = {
			types = { air_base }
		}

		success_factors = {
			success = {
				base = 0.5

				# Raiding unit modifiers
				experience = {
					reference = 1.0
					weight = 0.1
					start_weight = -0.1
				}
				# air_agility = {
				# 	reference = 100.0 # As air unit agility approaches 100 (as defined by the value above), increase chance by this value
				# 	weight = 0.1 # At 0 agility, the modifier will have negative effect.
				# 	start_weight = -0.1 # The modifier will scale linearly, meaning at 50 agility, the modifier will be 0.
				# }
				reliability = {
					reference = 1
					weight = 0.1
					start_weight = -0.1
				}
				air_defence = {
					reference = 100
					weight = 0.05
					start_weight = -0.05
				}
				strategic_bomber = {
					reference = 75
					weight = 0.2
					start_weight = -0.2
				}

				## Actor Modifiers
				air_superiority = {
					reference = 1
					start_reference = 0.5
					weight = 0.25
					start_weight = -0.25
				}

				### Target Modifiers
				anti_air = {
					reference = 10
					weight = -0.5
				}
				interception = {
					reference = 500 # More than 500 fighters won't really make any difference
					weight = -0.25
				}
				radar = {
					weight = -0.05
				}
				intel = {
					weight = 0.3
					start_weight = -0.1
					reference = 100
				}
			}

			critical = {
				base = 0.10
			}
		}

		success_levels = {
			failure = {
				victim_effects = {
				}
				actor_effects = {
					# Damage to raiding units
					raid_damage_units = {
						plane_loss = 0.9
						ratio = yes
					}
					raid_add_unit_experience = 0.05
					var:actor_country = {
						add_fuel = -5000
					}
				}
				visual_effect = {
					entity = "nuke_entity"
					animation = "attack"
				}
				visual_effect = {
					entity = "raid_failed_entity"
					animation = "attack"
				}
			}
			limited_success = {
				victim_effects = {
					# Damage to Target
					var:target_state = {
						set_temp_variable = { tmp_damage_building = building_level@dockyard } # Get how many buildings in the state
						multiply_temp_variable = { tmp_damage_building = 0.25 } # Multiply by ratio of how many destroyed (e.g. 25% destroyed)
						round_temp_variable = tmp_damage_building # Round to nearest integer to display number of buildings destroyed to player
						custom_override_tooltip = {
							tooltip = {
								localization_key = raid_damage_buildings_tt
								building = dockyard
								num = [?tmp_damage_building]
							}
							meta_effect = {
								text = {
									damage_building = {
										type = dockyard
										damage = [BUILDING_DAMAGE]
									}
								}
								BUILDING_DAMAGE = "[?tmp_damage_building]"
							}
						}
					}
				}
				actor_effects = {
					# Damage to raiding units
					raid_damage_units = {
						plane_loss = 0.5
						ratio = yes
					}

					# XP etc
					raid_add_unit_experience = 0.1
					var:actor_country = {
						add_fuel = -5000
					}
				}
				visual_effect = {
					entity = "air_raids_2_limited_success_entity"
					animation = "attack"
				}
			}
			success = {
				victim_effects = {
					# Damage to Target
					var:target_state = {
						set_temp_variable = { tmp_damage_building = building_level@dockyard } # Get how many buildings in the state
						multiply_temp_variable = { tmp_damage_building = 0.5 } # Multiply by ratio of how many destroyed (e.g. 25% destroyed)
						round_temp_variable = tmp_damage_building # Round to nearest integer to display number of buildings destroyed to player
						custom_override_tooltip = {
							tooltip = {
								localization_key = raid_damage_buildings_tt
								building = dockyard
								num = [?tmp_damage_building]
							}
							meta_effect = {
								text = {
									damage_building = {
										type = dockyard
										damage = [BUILDING_DAMAGE]
									}
								}
								BUILDING_DAMAGE = "[?tmp_damage_building]"
							}
						}
					}
				}
				actor_effects = {
					# Damage to raiding units
					raid_damage_units = {
						plane_loss = 0.25
						ratio = yes
					}

					# XP etc
					raid_add_unit_experience = 0.2

					var:actor_country = {
						air_experience = 5
						add_fuel = -5000
					}
				}
				visual_effect = {
					entity = "air_raids_2_success_entity"
					animation = "attack"
				}
			}
			critical_success = {
				victim_effects = {
					# Damage to Target
					var:target_state = {
						set_temp_variable = { tmp_damage_building = building_level@dockyard } # Get how many buildings in the state
						multiply_temp_variable = { tmp_damage_building = 0.75 } # Multiply by ratio of how many destroyed (e.g. 25% destroyed)
						round_temp_variable = tmp_damage_building # Round to nearest integer to display number of buildings destroyed to player
						custom_override_tooltip = {
							tooltip = {
								localization_key = raid_damage_buildings_tt
								building = dockyard
								num = [?tmp_damage_building]
							}
							meta_effect = {
								text = {
									damage_building = {
										type = dockyard
										damage = [BUILDING_DAMAGE]
									}
								}
								BUILDING_DAMAGE = "[?tmp_damage_building]"
							}
						}
					}
				}
				actor_effects = {
					# Damage to raiding units
					raid_damage_units = {
						plane_loss = 0.1
						ratio = yes
					}

					# XP etc
					raid_add_unit_experience = 0.35

					var:actor_country = {
						air_experience = 10
						add_fuel = -5000
					}
				}
				visual_effect = {
					entity = "air_raids_2_critical_success_entity"
					animation = "attack"
				}
			}
		}
	}
	industrial_complex_raid = {
		days_to_prepare = 90

		ai_will_do = {
			base = 0
			# base = 1
			# modifier = {
			# 	# Don't target anyone who is not a potential enemy
			# 	factor = 0
			# 	NOT = {
			# 		is_in_array = {
			# 			array = potential_and_current_enemies
			# 			value = FROM  # Target country
			# 		}
			# 	}
			# }
			# modifier = {
			# 	# Don't target anyone who is not a potential enemy
			# 	factor = 0.25
			# 	NOT = {
			# 		has_war_with = FROM
			# 	}
			# }
			# modifier = {
			# 	factor = 3 # Historical
			# 	original_tag = ENG
			# 	has_war_with = GER
			# 	FROM = {
			# 		original_tag = ROM
			# 		is_in_faction_with = GER
			# 	}
			# }
		}

		category = air_raids

		command_power = 5 # command power allocation cost

		allowed = {
			always = yes
		}
		# Raid Type is visible
		visible = {
			always = yes
		}
		# Specific Target is visible
		show_target = {
			has_war_with = FROM
		}

		# Can prepare
		available = {

		}

		# Can launch a raid
		launchable = {
			has_war_with = FROM
		}

		target_type = {
			state = {
				industrial_complex > 15
			}
		}
		target_icon = GFX_industrial_complex_target_icon
		target_loc_key = raid_target_name_industrial_complex
		arrow = {
			type = air
		}
		unit_model = {
			type = equipment
		}
		launch_sound = raid_launch_air

		unit_requirements = {
			equipment = {
				type = { medium_plane_airframe large_plane_airframe }
				modules = {
					bomb_920kg_bomb_bay
					bomb_1000kg_bomb_bay
					bomb_1380kg_bomb_bay
					bomb_1400kg_bomb_bay
					bomb_1500kg_bomb_bay
					bomb_1840kg_bomb_bay
					bomb_2000kg_bomb_bay
					bomb_2300kg_bomb_bay
					bomb_2500kg_bomb_bay
					bomb_2760kg_bomb_bay
					bomb_3000kg_bomb_bay
					bomb_3220kg_bomb_bay
					bomb_3680kg_bomb_bay
					bomb_4600kg_bomb_bay
					bomb_5000kg_bomb_bay
					bomb_5520kg_bomb_bay
					bomb_8000kg_bomb_bay
					bomb_8280kg_bomb_bay
					bomb_9200kg_bomb_bay
				}
				amount = { min = 100 }
			}
		}
		starting_point = {
			types = { air_base }
		}

		success_factors = {
			success = {
				base = 0.5

				# Raiding unit modifiers
				experience = {
					reference = 1.0
					weight = 0.1
					start_weight = -0.1
				}
				# air_agility = {
				# 	reference = 100.0 # As air unit agility approaches 100 (as defined by the value above), increase chance by this value
				# 	weight = 0.1 # At 0 agility, the modifier will have negative effect.
				# 	start_weight = -0.1 # The modifier will scale linearly, meaning at 50 agility, the modifier will be 0.
				# }
				reliability = {
					reference = 1
					weight = 0.1
					start_weight = -0.1
				}
				air_defence = {
					reference = 100
					weight = 0.05
					start_weight = -0.05
				}
				strategic_bomber = {
					reference = 75
					weight = 0.2
					start_weight = -0.2
				}

				## Actor Modifiers
				air_superiority = {
					reference = 1
					start_reference = 0.5
					weight = 0.25
					start_weight = -0.25
				}

				### Target Modifiers
				anti_air = {
					reference = 10
					weight = -0.5
				}
				interception = {
					reference = 500 # More than 500 fighters won't really make any difference
					weight = -0.25
				}
				radar = {
					weight = -0.05
				}
				intel = {
					weight = 0.3
					start_weight = -0.1
					reference = 100
				}
			}

			critical = {
				base = 0.10
			}
		}

		success_levels = {
			failure = {
				victim_effects = {
				}
				actor_effects = {
					# Damage to raiding units
					raid_damage_units = {
						plane_loss = 0.9
						ratio = yes
					}
					raid_add_unit_experience = 0.05
					var:actor_country = {
						add_fuel = -5000
					}
				}
				visual_effect = {
					entity = "nuke_entity"
					animation = "attack"
				}
				visual_effect = {
					entity = "raid_failed_entity"
					animation = "attack"
				}
			}
			limited_success = {
				victim_effects = {
					# Damage to Target
					var:target_state = {
						set_temp_variable = { tmp_damage_building = building_level@industrial_complex } # Get how many buildings in the state
						multiply_temp_variable = { tmp_damage_building = 0.25 } # Multiply by ratio of how many destroyed (e.g. 25% destroyed)
						round_temp_variable = tmp_damage_building # Round to nearest integer to display number of buildings destroyed to player
						custom_override_tooltip = {
							tooltip = {
								localization_key = raid_damage_buildings_tt
								building = industrial_complex
								num = [?tmp_damage_building]
							}
							meta_effect = {
								text = {
									damage_building = {
										type = industrial_complex
										damage = [BUILDING_DAMAGE]
									}
								}
								BUILDING_DAMAGE = "[?tmp_damage_building]"
							}
						}
					}
				}
				actor_effects = {
					# Damage to raiding units
					raid_damage_units = {
						plane_loss = 0.5
						ratio = yes
					}

					# XP etc
					raid_add_unit_experience = 0.1
					var:actor_country = {
						add_fuel = -5000
					}
				}
				visual_effect = {
					entity = "air_raids_2_limited_success_entity"
					animation = "attack"
				}
			}
			success = {
				victim_effects = {
					# Damage to Target
					var:target_state = {
						set_temp_variable = { tmp_damage_building = building_level@industrial_complex } # Get how many buildings in the state
						multiply_temp_variable = { tmp_damage_building = 0.5 } # Multiply by ratio of how many destroyed (e.g. 25% destroyed)
						round_temp_variable = tmp_damage_building # Round to nearest integer to display number of buildings destroyed to player
						custom_override_tooltip = {
							tooltip = {
								localization_key = raid_damage_buildings_tt
								building = industrial_complex
								num = [?tmp_damage_building]
							}
							meta_effect = {
								text = {
									damage_building = {
										type = industrial_complex
										damage = [BUILDING_DAMAGE]
									}
								}
								BUILDING_DAMAGE = "[?tmp_damage_building]"
							}
						}
					}
				}
				actor_effects = {
					# Damage to raiding units
					raid_damage_units = {
						plane_loss = 0.25
						ratio = yes
					}

					# XP etc
					raid_add_unit_experience = 0.2

					var:actor_country = {
						air_experience = 5
						add_fuel = -5000
					}
				}
				visual_effect = {
					entity = "air_raids_2_success_entity"
					animation = "attack"
				}
			}
			critical_success = {
				victim_effects = {
					# Damage to Target
					var:target_state = {
						set_temp_variable = { tmp_damage_building = building_level@industrial_complex } # Get how many buildings in the state
						multiply_temp_variable = { tmp_damage_building = 0.75 } # Multiply by ratio of how many destroyed (e.g. 25% destroyed)
						round_temp_variable = tmp_damage_building # Round to nearest integer to display number of buildings destroyed to player
						custom_override_tooltip = {
							tooltip = {
								localization_key = raid_damage_buildings_tt
								building = industrial_complex
								num = [?tmp_damage_building]
							}
							meta_effect = {
								text = {
									damage_building = {
										type = industrial_complex
										damage = [BUILDING_DAMAGE]
									}
								}
								BUILDING_DAMAGE = "[?tmp_damage_building]"
							}
						}
					}
				}
				actor_effects = {
					# Damage to raiding units
					raid_damage_units = {
						plane_loss = 0.1
						ratio = yes
					}

					# XP etc
					raid_add_unit_experience = 0.35

					var:actor_country = {
						air_experience = 10
						add_fuel = -5000
					}
				}
				visual_effect = {
					entity = "air_raids_2_critical_success_entity"
					animation = "attack"
				}
			}
		}
	}
}